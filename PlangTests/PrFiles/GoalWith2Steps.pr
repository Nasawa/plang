{
  "GoalName": "GoalWith2Steps",
  "Method": null,
  "Comment": null,
  "GoalSteps": [
    {
      "Text": "set var %text% to \"Hello plang\"",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule.Program",
      "Name": "SetVariable",
      "Description": "Set the variable 'text' to the string 'Hello plang'",
      "PrFileName": "01. SetVariable.pr",
      "RelativePrPath": ".build\\Start\\01. SetVariable.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-08-31T20:34:11.8122756+00:00",
      "WaitForExecution": true,
      "ErrorHandler": {
        "IgnoreErrors": false,
        "Except": []
      },
      "RetryHandler": {
        "RetryCount": 0,
        "RetryDelayInMilliseconds": 0
      },
      "Custom": {},
      "Number": 0,
      "LlmQuestion": {
        "type": "ModuleDecider",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\r\n  \"StepName\": \"String\",\r\n  \"StepDescription\": \"String\",\r\n  \"Modules\": \"string[]\",\r\n  \"WaitForExecution\": \"Boolean\",\r\n  \"ErrorHandler\": {\r\n    \"IgnoreErrors\": \"Boolean\",\r\n    \"Except\": \"String[]\"\r\n  },\r\n  \"RetryHandler\": {\r\n    \"RetryCount\": \"Int32\",\r\n    \"RetryDelayInMilliseconds\": \"Int32\"\r\n  }\r\n}\r\nBe Concise\r\n",
        "question": "set var %text% to \"Hello plang\"",
        "assistant": "This is a list of modules you can choose from\r\n## list starts ##\r\nWindowAppModule(Native module for window applications)\n, WebserverModule(Starts a webserver, writes to Body, Header, Cookie)\n, TerminalModule(Provides terminal/console access to run external applications)\n, SeleniumModule(Runs a browser instance, browses a website, inputs values and extracts content)\n, ScheduleModule(Handles wait, sleep and time delay. Includes a cron scheduler)\n, PythonModule(Runs python scripts. Parameters can be passed to the python process)\n, OutputModule(Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response)\n, MessageModule(Sends and receives private messages using Nostr protocol)\n, LoopModule(Handles while, for, foreach, loops through a list)\n, LocalOrGlobalVariableModule(Sets & Gets local and static variables. Binds events to variable)\n, LlmModule(Asks LLM a question and receives an answer)\n, ListDictionaryModule(Adds, updates, deletes and retrieves variables to and from a list or dictionary. It can be local variable or static/global)\n, HttpModule(Makes Http request)\n, HtmlModule(Handles HTML related tasks)\n, FileModule(Handles file system access)\n, EnvironmentSettingsModule(Handles various settings for the program, such as culture, date & number formatting)\n, DbModule(Handles database access, select, insert, update, delete and execute raw sql. Handles transactions)\n, CryptographicModule(Handles encryption, decryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token)\n, ConditionalModule(Manages if conditions for the user request)\n, CodeModule(Generates c# code from user description. Only use if no other module is found)\n, CallGoalModule(Calls another Goal, when ! is prefixed, e.g. !RenameFile)\n, BlockchainModule(Uses blockchain, creates wallet, account info, transfers money, signs message, verifies signature)\n\r\n## list ends ##\r\n\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": true,
        "PreviousResult": null,
        "RawResponse": "{\n  \"StepName\": \"SetVariable\",\n  \"StepDescription\": \"Set the variable 'text' to the string 'Hello plang'\",\n  \"Modules\": [\"LocalOrGlobalVariableModule\"],\n  \"WaitForExecution\": true,\n  \"ErrorHandler\": {\n    \"IgnoreErrors\": false,\n    \"Except\": []\n  },\n  \"RetryHandler\": {\n    \"RetryCount\": 0,\n    \"RetryDelayInMilliseconds\": 0\n  }\n}"
      }
    },
    {
      "Text": "write out %text%",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule.Program",
      "Name": "WriteOutText",
      "Description": "Write out the value of the variable 'text' to the user interface.",
      "PrFileName": "02. WriteOutText.pr",
      "RelativePrPath": ".build\\Start\\02. WriteOutText.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Executed": null,
      "Generated": "2023-08-31T20:34:19.8134289+00:00",
      "WaitForExecution": true,
      "ErrorHandler": {
        "IgnoreErrors": false,
        "Except": []
      },
      "RetryHandler": {
        "RetryCount": 0,
        "RetryDelayInMilliseconds": 0
      },
      "Custom": {},
      "Number": 1,
      "LlmQuestion": {
        "type": "ModuleDecider",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\r\n  \"StepName\": \"String\",\r\n  \"StepDescription\": \"String\",\r\n  \"Modules\": \"string[]\",\r\n  \"WaitForExecution\": \"Boolean\",\r\n  \"ErrorHandler\": {\r\n    \"IgnoreErrors\": \"Boolean\",\r\n    \"Except\": \"String[]\"\r\n  },\r\n  \"RetryHandler\": {\r\n    \"RetryCount\": \"Int32\",\r\n    \"RetryDelayInMilliseconds\": \"Int32\"\r\n  }\r\n}\r\nBe Concise\r\n",
        "question": "write out %text%",
        "assistant": "This is a list of modules you can choose from\r\n## list starts ##\r\nWindowAppModule(Native module for window applications)\n, WebserverModule(Starts a webserver, writes to Body, Header, Cookie)\n, TerminalModule(Provides terminal/console access to run external applications)\n, SeleniumModule(Runs a browser instance, browses a website, inputs values and extracts content)\n, ScheduleModule(Handles wait, sleep and time delay. Includes a cron scheduler)\n, PythonModule(Runs python scripts. Parameters can be passed to the python process)\n, OutputModule(Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response)\n, MessageModule(Sends and receives private messages using Nostr protocol)\n, LoopModule(Handles while, for, foreach, loops through a list)\n, LocalOrGlobalVariableModule(Sets & Gets local and static variables. Binds events to variable)\n, LlmModule(Asks LLM a question and receives an answer)\n, ListDictionaryModule(Adds, updates, deletes and retrieves variables to and from a list or dictionary. It can be local variable or static/global)\n, HttpModule(Makes Http request)\n, HtmlModule(Handles HTML related tasks)\n, FileModule(Handles file system access)\n, EnvironmentSettingsModule(Handles various settings for the program, such as culture, date & number formatting)\n, DbModule(Handles database access, select, insert, update, delete and execute raw sql. Handles transactions)\n, CryptographicModule(Handles encryption, decryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token)\n, ConditionalModule(Manages if conditions for the user request)\n, CodeModule(Generates c# code from user description. Only use if no other module is found)\n, CallGoalModule(Calls another Goal, when ! is prefixed, e.g. !RenameFile)\n, BlockchainModule(Uses blockchain, creates wallet, account info, transfers money, signs message, verifies signature)\n\r\n## list ends ##\r\n\r\n",
        "model": "gpt-4",
        "caching": true,
        "Reload": true,
        "PreviousResult": null,
        "RawResponse": "{\n  \"StepName\": \"WriteOutText\",\n  \"StepDescription\": \"Write out the value of the variable 'text' to the user interface.\",\n  \"Modules\": [\"OutputModule\"],\n  \"WaitForExecution\": true,\n  \"ErrorHandler\": {\n    \"IgnoreErrors\": false,\n    \"Except\": []\n  },\n  \"RetryHandler\": {\n    \"RetryCount\": 0,\n    \"RetryDelayInMilliseconds\": 0\n  }\n}"
      }
    }
  ],
  "Description": null,
  "Visibility": 1,
  "GoalFileName": "GoalWith2Steps.goal",
  "RelativeGoalPath": "\\GoalWith2Steps.goal",
  "RelativeGoalFolderPath": "\\",
  "RelativePrPath": ".build\\GoalWith2Steps\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\GoalWith2Steps"
}