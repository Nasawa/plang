you can retrieve settings by calling \%Settings.Name_of_Key\%, e.g. \%Settings.API_KEY\%
plang will ask for the setting if it is empty

```plang
APIRequest
- get http://some-api.com
    Bearer: \%Settings.SomeAPIKey\%
```

How to add new Settings key
When you write your plang and you reference \%Settings.MyKey\%, plang will search the settings database, located at .db/system.sqlite, 
if it finds a setting stored in the database with the name MyKey, it will return that value
if no key is found, plang will ask the user for the value of the key. This is done with AskUserHandler that can be overwritten using injection(see below).
to change or remove key, you will need to open the .db/system.sqlite database with a database tool


Everything below is for advanced users, it is for customizing the language but few will need to

it is possible to overwrite the settings service by injecting your own Settings service.(./Services.md)
This is important when the developer want to user his own custom storage medium for settings, such as .env, Google Cloud's Secret Manager,  Azure Key Vault, AWS Secrets Manager, or other secure storage medium.
To do that, you need to implement the ISettingsRepository and then injecting the dll 
```plang
Start
- inject settings, 'mysettings', global
```
This tells the plang runtime to inject the service located in the folder 'services/mysettings/*.dll' and sets it to be global to the application

when asking the plang Runtime throw AskUserException, you can inject your own askuser service, if you want to for example send a message with them message module
you need to implement the IAskUserHandler interface and inject it
```
Start
- inject askuser, 'myaskuser'
```
it looks for your service in the folder, 'services/myaskuser' folder
this service needs to implement 
```csharp
public async Task<bool> Handle(AskUserException ex)
```
and when you have done the logic needed, call 
```csharp
await ex.InvokeCallback(value);
```
where variable 'value' is the expected response. 

For example, when creating database connection, the answer can be any natural language. The LLM will try to map it correctly to create the database connection

Read all about how to create your own service(./Services.md)