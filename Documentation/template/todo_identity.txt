


## Add `%Identity%` to our Todo web service
Lets change the previous todo web service to use %Identity%

The `%Identity%` allows us to show only those tasks that belong to a specific user.
This demostrates how to use the built in %Identity% variable

## What is `%Identity%`
very short: it is like your `user_id` in the system. more for understanding it read [what is %Identity%](./Identity.md)

## Video of tutorial
https://www.youtube.com/watch?v=0FYqllGVOQU&list=PLbm1UMZKMaqfT4tqPtr-vhxMs4JGGFVEB&index=4

# Prereq

You should have gone through prev. tutorials to have the .goal files, start [previous tutorials](./Todo_webservice.md)

1. Change Setup.goal

Add the following step your Setup.goal file
```
- add column 'Identity' to tbl 'Todos'
```
After adding it, your Setup.goal file should look like this
```plang
Setup
- create table Todos 
    columns:    task(string, not null), due_date(datetime, not null), 
                completed(bool, false), created(datetime, now)
- add column 'category' to tbl 'Todos'    
- add column 'Identity' to tbl 'Todos'             
```

2. Make sure `%Identity%` is not empty

*You will learn how to use Events(./Events.md) and the power they give you to make your app simple and flexible*

- Create a folder `events` in root of Todos
- Create a file `Events.goal` in `events` folder

```plang
Events
- before any api/*, call CheckIdentity

ShowError
- if %Identity% is empty then
    - write out error 'You need to sign the request'
```

Now you have authentication solved for your program, in 3 lines of code


3. Change NewTask.goal
Let's add `%Identity%` into the insert statement

Lets modify NewTask.goal, like this
```plang
NewTask
- make sure that %task% and %due_date% is not empty, throw error
- insert into Todos %task%, %due_date%, %Identity%, write to %id%
- call !Categorize, dont wait
- write out %id%

Categorize
- [llm]: system: categories the user input by 3 categories, 'Work', "home", 'hobby'
    user: %task%
    scheme: {category:string}
- update table tasks, set %category% where %id%
```

we added `%Identity%` into the `- insert into ...` statement


4. Change `List.goal`
Lets filter on the %Identity% when selecting the list

```plang
List
- select everything from Todos where %Identity%, write to %todos%
- write out %todos%
```

we added a `where` statement to the `- select everything...` step, where we are filtering out by your `%Identity%`

5. Test creating new Task

If you used your favorite REST client before, this is not longer an option. (this is an important statement)
You need to write the test in plang. The reason is that the program needs to generate that %Identity% for us

Lets modify our `TestNewTask.goal` file (just change the task text)

- Modify `TestNewTask.goal` file in the `test` directory with the following code:

    ```plang
    TestNewTask
    - post http://localhost:8080/api/newtask
        {
            "task":"Do some grocery shopping",
            "due_date": "2023-27-12"
        }
        write to %result%
    - write out %result%
    ```

Then, execute the `TestNewTask.goal` file:

- Press F5 in VS Code, in the prompt window type in `TestNewTask` and press enter
- or if you prefer terminal

    ```bash
    plang exec test/TestNewTask
    ```

6. Get my new task

Now we need to write a plang client that retrieves the task list. 
We should only get 1 (not 3) result back, since we are now filtering on %Identity%

Create `TestTasks.goal` in the `tests` folder

    ```plang
    TestTasks
    - get http://localhost:8080/api/list
        write to %todos%
    - write out %todos%
    ```
    
- Press F5 in VS Code, in the prompt window type in `TestTasks` and press enter
- or if you prefer terminal

    ```bash
    plang exec test/TestTasks
    ```    

Next steps

- If you are running on a Windows machine (sorry, only Windows for now), let's change the web service [into a desktop app](./Todo_UI.md)
- Else, [learn how you can rethink](./todo_new_approch.md) how you make apps, making the computer adapt to the user