ErrorHandler 


## basics

Allows you to handle errors in plang.

You can handle errors
```plang
Start
- get http://example.org
    on error call ManageError

ManageError
- log error %!error%
- throw 'Error happened'
```

ErrorHandler has the following properties
- IgnoreError, default is false, allows you to catch error but ignore it and continue to next step. example: ```on error 'element not found', ignore```
- Message, message of the error, check if the text defined is in the Message(case insenitive). example on error 'timeout', call HandleTimeout. 
- StatusCode, status code of the error, similiar to http status codes. 400 user error, 500 server/system error. example: on error 402, call PayForService
- Key, (This is the key of the error, each can have different, StepError, ServiceError, ProgramError are common). Example: on error key:'ProgramError', call HandleProgramError
- GoalToCall, what goal to call on the error, you can send parameters, e.g. on error call HandleError %variable%
- ReytryHandler allows you to define how many times to retry the step over which period of time.

Error object(defined as %!error% in plang) is thrown by the runtime, this is the object that gets sent to the error handler. Error object as there properties the user can bind to
- Message (this is the error message, it does Message contains(userDefinedMessage), case insenitive)
- Key (This is the key of the error, each can have different, StepError, ServiceError, ProgramError are common)
- StatusCode (this is the status code (http status codes) of the error, 400 are user error, 500 are system errors)
- Other properties depending on the error type, see the properties by writing out the %!error% variable, example: ```- write out %!error%```

This means, user can define error handling like this
```plang
Start
- get https://example.org
    on error 'timeout' call HandleTimeout, retry 5 times over 3 minutes

HandleTimeout
- log warning "Got timeout %!error%"
```
the error handler will search for the word 'timeout' in Message property

```plang
    on error key 'ProgramError', call HandleProgramError
```
the error handler will only call HandleProgramError if the key is 'ProgramError'. Most common are GoalError, StepError, ProgramError, ServiceError depending on where the error occured. You can see all errors in the language here https://github.com/PLangHQ/plang/tree/main/PLang/Errors

```plang
- get https://example.org/use_service_that_costs
    on error 402, call HandlePayment
```
the error handler will only call HandleProgramError if the status code is 402


It's possible to have multiple on error handlers
```plang
Start
- get http://example.org
    on error 'timeout', retry 2 times over 30 seconds then call ManageTimeoutError
    on error 'host not found' call InternetDownError, retry 5 times over 5 minutes
    on error 402, call ExecutePayment

ManageTimeoutError
- write out error 'There was a timeout'
- if %isProduction%
    - throw error 'There was a time out'

InternetDownError
- write out error 'Internet is down'

ExecutePayment
- transfer 50 usdc to 0x123..
```

Here is important to note how the retry is handled:
- on error 'timeout' it starts by doing the retry if it fails those 2 retries it will call the ManageTimeoutError
- on error 'host not found', it first call InternetDownError then retry it

So you have the option of retrying before or after you call you error handler.



You can ignore all errors and continue to execute next step
```plang
Start
- get http://example.org
    ignore all errors
```

## order of error handling

The order of error handling matters, if error handling is defined like this
```plang
Start
- read file.txt into %content%
    on error ignore
    on error 'timeout', call HandleTimeout
```
then on error 'timeout' will never be called because on on error ignore catches all errors and ignores them and continues to execute next step

## handling error in call stack

When you want to handle and error but not really stop execution of a step, you can use the `end goal` command
let take an example of subscriptions of many user, you are trying to charge and get error while charging one user, 
you want to log down that error then move on to the next user, here is example code

```plang
Start
- select subscriberId from users, write to %users%
- for each %users%, call ChargeUser %user%=item

ChargeUser
- get http://localhost:100/ChargeUser?userId=%user.id%, 
    on error call HandleError
- write out 'if error happens, this will not be written out'

HandleError
- write out %!error%
- end goal and previous // you can also say 'end goal and 1 level more'
```

This will take the execution back to the `Start` goal, and it will process the next user in the for loop.
See ThrowErrorModule(./modules/PLang.Modules.ThrowErrorModule.md) for more information.

## Continue to next step

The code can have an error, you can catch and decide to continue to the next step after it

```plang
Start
- get https://doesNotExists,
    on error call HandleError, continue to next step
- write out 'This will run even tho prev step got error'
```


## global error handling

You can also use events to handle errors (../../Events.md)

```plang
Events
- on error for step, call HandleErrorOnStep
- on error for goal, call HandleErrorOnGoal

HandleErrorOnStep
- write out error, 'Error on step: %!error%'

HandleErrorOnGoal
- write out error, 'Error on goal: %!error%'
```