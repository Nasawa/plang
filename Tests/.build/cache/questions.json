[
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "create table tasks, columns decription(not null), due_date(datetime, not null), created(datetime, default now)",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateTasksTable\",\n\"StepDescription\": \"Create a new table named 'tasks' in the database. The table should have three columns: 'description' which cannot be null, 'due_date' which is a datetime and cannot be null, and 'created' which is a datetime and has a default value of the current time.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateTasksTable\",\n\"StepDescription\": \"Create a new table named 'tasks' in the database. The table should have three columns: 'description' which cannot be null, 'due_date' which is a datetime and cannot be null, and 'created' which is a datetime and has a default value of the current time.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "651792827a24c45f38a7aef404dd24e776dad13e77f000df28cf7047fa1b6858",
    "Created": "2023-12-05T14:04:40.1945204Z"
  },
  {
    "question": {
      "type": "DbModule",
      "system": "",
      "question": "\r\nGive me sql statement to list all the tables and views in my database data.sqlite on System.Data.SQLite.SQLiteConnection.\r\nGive me sql statement on how to get all column names and type in a table\r\nTable name should be @TableName, database name is @Database if needed as parameters\r\n\r\nGive your response in JSON, scheme\r\n{\"SelectTablesAndViewsInMyDatabaseSqlStatement\": string,\n\"SelectColumnsFromTablesSqlStatement\": string}\r\n\r\nBe concise",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"SelectTablesAndViewsInMyDatabaseSqlStatement\": \"SELECT name FROM sqlite_master WHERE type IN ('table','view');\",\n\"SelectColumnsFromTablesSqlStatement\": \"PRAGMA table_info(@TableName);\"\n}"
    },
    "answer": "{\n\"SelectTablesAndViewsInMyDatabaseSqlStatement\": \"SELECT name FROM sqlite_master WHERE type IN ('table','view');\",\n\"SelectColumnsFromTablesSqlStatement\": \"PRAGMA table_info(@TableName);\"\n}",
    "hash": "b6fe8a733da4c5d751b481a7f14e2d43197f336f17119e7c20ae801bcd5ec759",
    "Created": "2023-12-05T14:04:45.7540795Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: create table tasks, columns decription(not null), due_date(datetime, not null), created(datetime, default now)",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, List`1<Object>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, List`1<Object>? Parameters) \nInt32 Delete(String sql, List`1<Object>? Parameters) \nInt32 Insert(String sql, List`1<Object>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CreateTable\", \"TableNames\": [\"tasks\"]}"
    },
    "answer": "{\"FunctionName\": \"CreateTable\", \"TableNames\": [\"tasks\"]}",
    "hash": "21afcca8e97b4656e0abbb08c5cd4c8ff5d3be42f27121a359b64859f158d352",
    "Created": "2023-12-05T14:04:47.225501Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nvoid CreateTable(String sql)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST add id to create statement.\r\nIf id is not defined then add id to the create statement. \r\nThe id MUST NOT be auto incremental, but is primary key.\r\nThe id should be datatype long/bigint/.. which fits SQLiteConnection.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: create table tasks, columns decription(not null), due_date(datetime, not null), created(datetime, default now)",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, List`1<Object>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, List`1<Object>? Parameters) \nInt32 Delete(String sql, List`1<Object>? Parameters) \nInt32 Insert(String sql, List`1<Object>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CreateTable\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"sql\",\n\"Value\": \"CREATE TABLE tasks (id INTEGER PRIMARY KEY, description TEXT NOT NULL, due_date DATETIME NOT NULL, created DATETIME DEFAULT CURRENT_TIMESTAMP)\"}]}"
    },
    "answer": "{\"FunctionName\": \"CreateTable\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"sql\",\n\"Value\": \"CREATE TABLE tasks (id INTEGER PRIMARY KEY, description TEXT NOT NULL, due_date DATETIME NOT NULL, created DATETIME DEFAULT CURRENT_TIMESTAMP)\"}]}",
    "hash": "9e8c51ab58eea4810eff74b47f0e698c7f7a065bcd9991a2eaac4bb9338bcf21",
    "Created": "2023-12-05T14:04:53.673396Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "Create table users, columns name(not null), email(not null)",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CreateUsersTable\",\n\"StepDescription\": \"Create a table named 'users' with columns 'name' and 'email', both of which cannot be null.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CreateUsersTable\",\n\"StepDescription\": \"Create a table named 'users' with columns 'name' and 'email', both of which cannot be null.\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "351fe565a903f82f456c5991e0a16ff3fa17c983fb1fdaf012bcec5666ff325f",
    "Created": "2023-12-05T14:05:14.8567335Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: Create table users, columns name(not null), email(not null)",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, List`1<Object>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, List`1<Object>? Parameters) \nInt32 Delete(String sql, List`1<Object>? Parameters) \nInt32 Insert(String sql, List`1<Object>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CreateTable\", \"TableNames\": [\"users\"]}"
    },
    "answer": "{\"FunctionName\": \"CreateTable\", \"TableNames\": [\"users\"]}",
    "hash": "96c89a22c58339cbcd023a272e15d80e885998474e69ee7a237a32d0f8c5bccc",
    "Created": "2023-12-05T14:05:17.6155532Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nvoid CreateTable(String sql)  \r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST add id to create statement.\r\nIf id is not defined then add id to the create statement. \r\nThe id MUST NOT be auto incremental, but is primary key.\r\nThe id should be datatype long/bigint/.. which fits SQLiteConnection.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: Create table users, columns name(not null), email(not null)",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, List`1<Object>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, List`1<Object>? Parameters) \nInt32 Delete(String sql, List`1<Object>? Parameters) \nInt32 Insert(String sql, List`1<Object>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"CreateTable\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"sql\",\n\"Value\": \"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT NOT NULL)\"}]}"
    },
    "answer": "{\"FunctionName\": \"CreateTable\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"sql\",\n\"Value\": \"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT NOT NULL)\"}]}",
    "hash": "5ea784c866332a23858e65861ade38f850fd63edb7a453625059b30c0647bc96",
    "Created": "2023-12-05T14:07:52.6223665Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get content of all '.goal' files, write to %files%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetGoalFilesContent\",\n\"StepDescription\": \"This step involves accessing the file system to find all files with the '.goal' extension. The content of these files is then read and stored in the variable %files%.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetGoalFilesContent\",\n\"StepDescription\": \"This step involves accessing the file system to find all files with the '.goal' extension. The content of these files is then read and stored in the variable %files%.\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}",
    "hash": "47ccd1f077f2311f484ec4efd2a7dcaa262c3b3327022ff738dac39cab2b0006",
    "Created": "2023-12-05T14:08:03.698629Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get content of all '.goal' files, write to %files%",
      "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path) \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files) \nList`1 ReadMultipleTextFiles(String folderPath, String searchPattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String? directoryPath = ./, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \nvoid ListenToFileChange(String[] fileSearchPatterns, String goalToCall, String[]? excludeFiles, Boolean? includeSubdirectories = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadMultipleTextFiles\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"folderPath\", \"Value\": \"./\"},\n    {\"Type\": \"String\", \"Name\": \"searchPattern\", \"Value\": \"*.goal\"},\n    {\"Type\": \"Boolean\", \"Name\": \"includeAllSubfolders\", \"Value\": true}\n],\n\"ReturnValue\": {\"Type\": \"List`1\", \"VariableName\": \"files\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadMultipleTextFiles\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"folderPath\", \"Value\": \"./\"},\n    {\"Type\": \"String\", \"Name\": \"searchPattern\", \"Value\": \"*.goal\"},\n    {\"Type\": \"Boolean\", \"Name\": \"includeAllSubfolders\", \"Value\": true}\n],\n\"ReturnValue\": {\"Type\": \"List`1\", \"VariableName\": \"files\"}}",
    "hash": "db8fbf55f8c787f4d253efe00190c5a38aa0a2e632fa99b50284a8d615326033",
    "Created": "2023-12-05T14:08:13.6295876Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "foreach %files%, call !LoadText file=%item%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%files%(List`1), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"LoadTextForEachFile\",\n\"StepDescription\": \"For each file in the list of files, call the LoadText function with the current file as the parameter.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"LoadTextForEachFile\",\n\"StepDescription\": \"For each file in the list of files, call the LoadText function with the current file as the parameter.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "89eb69f931a4d03713fe144dbb85f5b7444df81d8d7c12b1fe86586d7f6ca24b",
    "Created": "2023-12-05T14:08:20.1020579Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: foreach %files%, call !LoadText file=%item%",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2<String>? parameters) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfiles(List`1), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"variableToLoopThrough\", \"Value\": \"%files%\"},\n    {\"Type\": \"String\", \"Name\": \"goalNameToCall\", \"Value\": \"LoadText\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"parameters\", \"Value\": {\"file\": \"%item%\"}}\n]}"
    },
    "answer": "{\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"variableToLoopThrough\", \"Value\": \"%files%\"},\n    {\"Type\": \"String\", \"Name\": \"goalNameToCall\", \"Value\": \"LoadText\"},\n    {\"Type\": \"Dictionary`2<String>\", \"Name\": \"parameters\", \"Value\": {\"file\": \"%item%\"}}\n]}",
    "hash": "99df94827631685f2b0eda3c1ba36edaa278b50cd6ce13e08a3c39109ea11710",
    "Created": "2023-12-05T14:08:30.2755821Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write to examples.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write data to the file named examples.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write data to the file named examples.txt\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}",
    "hash": "95a717d36f89c7ff8c262113570666ed2029def69bf3ecc9cbae88e18bb28df5",
    "Created": "2023-12-05T14:08:32.8867383Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write to examples.txt",
      "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path) \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files) \nList`1 ReadMultipleTextFiles(String folderPath, String searchPattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String? directoryPath = ./, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \nvoid ListenToFileChange(String[] fileSearchPatterns, String goalToCall, String[]? excludeFiles, Boolean? includeSubdirectories = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"path\",\n\"Value\": \"examples.txt\"},\n{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"overwrite\",\n\"Value\": false}]}"
    },
    "answer": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"path\",\n\"Value\": \"examples.txt\"},\n{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"overwrite\",\n\"Value\": false}]}",
    "hash": "75081ed36481cd4e878c8d813e279615fcff7eec4c1aa1e9325a666f6a965743",
    "Created": "2023-12-05T14:08:42.0296112Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "append to %content%, %file%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToFile\",\n\"StepDescription\": \"Append the content stored in the variable %content% to the file specified by the variable %file%\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AppendToFile\",\n\"StepDescription\": \"Append the content stored in the variable %content% to the file specified by the variable %file%\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}",
    "hash": "31b20bdfcb57c3b98ac0d2c268f05fc267d6dd2c2705f8b2ae1959838652deac",
    "Created": "2023-12-05T14:08:45.2551956Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: append to %content%, %file%",
      "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path) \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files) \nList`1 ReadMultipleTextFiles(String folderPath, String searchPattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String? directoryPath = ./, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \nvoid ListenToFileChange(String[] fileSearchPatterns, String goalToCall, String[]? excludeFiles, Boolean? includeSubdirectories = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"%file%\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"%content%\"}]}"
    },
    "answer": "{\"FunctionName\": \"AppendToFile\",\n\"Parameters\": [{\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"%file%\"},\n               {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"%content%\"}]}",
    "hash": "c9ddb42bf7424c580748f836c1a0a2a6625acd2739ee66e54bd9975e02b02390",
    "Created": "2023-12-05T14:08:52.0234554Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'Start db injection'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputStartDbInjection\",\n\"StepDescription\": \"Write out the string 'Start db injection'\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputStartDbInjection\",\n\"StepDescription\": \"Write out the string 'Start db injection'\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "012e1c74dfc414807f41140b5eeec8b28716aae0ad72fbd7a1ad415676bf964e",
    "Created": "2023-12-05T14:08:58.4335129Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'Start db injection'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"Start db injection\"},\n{\"Type\": \"boolean\",\n\"Name\": \"writeToBuffer\",\n\"Value\": false},\n{\"Type\": \"string\",\n\"Name\": \"type\",\n\"Value\": \"text\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"Start db injection\"},\n{\"Type\": \"boolean\",\n\"Name\": \"writeToBuffer\",\n\"Value\": false},\n{\"Type\": \"string\",\n\"Name\": \"type\",\n\"Value\": \"text\"}]}",
    "hash": "2f53c14044c30ce7c45c00c40bed842e5802d30e054643dc9bacc7cfcf1854ab",
    "Created": "2023-12-05T14:09:06.9484638Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "SELECT version(); write to %version%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetDatabaseVersion\",\n\"StepDescription\": \"Execute the SQL command 'SELECT version();' and store the result in the variable %version%\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetDatabaseVersion\",\n\"StepDescription\": \"Execute the SQL command 'SELECT version();' and store the result in the variable %version%\",\n\"Modules\": [\"PLang.Modules.DbModule\"],\n\"WaitForExecution\": true}",
    "hash": "70b169f3950bd8f1f9cb9de9c452248a06339b7e04ae8e00ba056f809e50aff5",
    "Created": "2023-12-05T14:09:14.3334258Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nTableNames: table names in sql statement\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"TableNames\"?: string[]}",
      "question": "command: SELECT version(); write to %version%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, List`1<Object>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, List`1<Object>? Parameters) \nInt32 Delete(String sql, List`1<Object>? Parameters) \nInt32 Insert(String sql, List`1<Object>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \n\r\n## functions available ends ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\", \"TableNames\": []}"
    },
    "answer": "{\"FunctionName\": \"Select\", \"TableNames\": []}",
    "hash": "51b070a6bc0e13a601c5e15e9ec7199f3dcf237f56781f7b54db7a9a889e7206",
    "Created": "2023-12-05T14:09:16.8484492Z"
  },
  {
    "question": {
      "type": "PLang.Modules.DbModule.Builder",
      "system": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\ndynamic Select(String sql, List<object>()? Parameters = null, bool selectOneRow_Top1OrLimit1 = false) )\r\n## csharp function ##\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nParameters is List of ParameterInfo(string ParameterName, string VariableNameOrValue, string TypeFullName)\r\nTypeFullName is Full name of the type in c#, System.String, System.Double, etc.\r\n\r\nYou MUST generate a valid sql statement for SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: SELECT version(); write to %version%",
      "assistant": "# examples #\r\n\"select everything from tableX\" => sql: \"SELECT * FROM tableX\"\r\n\"select from tableB where id=%id%\" => sql: \"SELECT * FROM tableB WHERE id=@id\"\r\n# examples #",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Select\",\n\"Parameters\": [{\"Type\": \"System.String\",\n\"Name\": \"sql\",\n\"Value\": \"SELECT version();\"}],\n\"ReturnValue\": {\"Type\": \"System.String\",\n\"VariableName\": \"version\"}}"
    },
    "answer": "{\"FunctionName\": \"Select\",\n\"Parameters\": [{\"Type\": \"System.String\",\n\"Name\": \"sql\",\n\"Value\": \"SELECT version();\"}],\n\"ReturnValue\": {\"Type\": \"System.String\",\n\"VariableName\": \"version\"}}",
    "hash": "ecc1e2fb418bca6e93cafc71679c9baa6cdefaa4b3acbca7ad3a2615fb5e0d0c",
    "Created": "2023-12-05T14:09:23.2824955Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'Version: %version%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%version%(System.String), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputVersion\",\n\"StepDescription\": \"Write out the string 'Version: ' followed by the value of the variable %version%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputVersion\",\n\"StepDescription\": \"Write out the string 'Version: ' followed by the value of the variable %version%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "e9815461cc957348404a041b6043441df94266f347cd79971b3f18f357467098",
    "Created": "2023-12-05T14:09:27.4478469Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'Version: %version%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##\r\n## defined variables ##\r\nversion(System.String), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"Version: %version%\"}],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"Version: %version%\"}],\n\"ReturnValue\": null}",
    "hash": "1146746e1783b33269d476cd910649dfcb8dea2598a13f4fbf199701e61d7606",
    "Created": "2023-12-05T14:09:31.3356543Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[llm] system: Say hello to  me\n        {hello:string}",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LlmModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"SayHello\",\n\"StepDescription\": \"The system is instructed to output a greeting message 'hello' to the user.\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"SayHello\",\n\"StepDescription\": \"The system is instructed to output a greeting message 'hello' to the user.\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true}",
    "hash": "3aa0d0e1fee39c0ef67be668456b0270a2794e2a39edd0662eafe21d5f57a9af",
    "Created": "2023-12-05T14:09:39.3633145Z"
  },
  {
    "question": {
      "type": "PLang.Modules.LlmModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [llm] system: Say hello to  me\n        {hello:string}",
      "assistant": "## functions available defined in csharp ##\r\nvoid AskLlm(String? scheme = {Result:string}, String? system, String? assistant, String? user, String? model = gpt-4, Double? tempature = 0, Double? topP = 0, Double? frequencyPenalty = 0, Double? presencePenalty = 0, Boolean? cacheResponse = True) \n\r\n## functions available ends ##\nThe following user request is for constructing a message to LLM engine\r\n\r\nDetermine what part is system, assistant and user properties. If you cannot map it, the whole user request should be on user property\r\nDetermine the scheme, it is the json scheme that the llm is expected to return, this is required and cannot be empty string. If scheme is not defined, the scheme is created from variables the user expects to write to\r\nIf user expects the result to be written into variables, then those are in the scheme:\r\n\r\n## examples ##\r\nsystem: do stuff, user: this is data from user, write to %data%, %output% and %dest% => scheme: {data:object, output:object, dest:object}\r\nsystem: setup up system, asssistant: some assistant stuff, user: this is data from user, scheme: {data:string, year:number, name:string} => scheme:  {data:string, year:number, name:string}\r\n## examples ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"scheme\", \"Value\": \"{hello:string}\"},\n    {\"Type\": \"string\", \"Name\": \"system\", \"Value\": \"Say hello to me\"},\n    {\"Type\": \"string\", \"Name\": \"assistant\", \"Value\": \"\"},\n    {\"Type\": \"string\", \"Name\": \"user\", \"Value\": \"\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"scheme\", \"Value\": \"{hello:string}\"},\n    {\"Type\": \"string\", \"Name\": \"system\", \"Value\": \"Say hello to me\"},\n    {\"Type\": \"string\", \"Name\": \"assistant\", \"Value\": \"\"},\n    {\"Type\": \"string\", \"Name\": \"user\", \"Value\": \"\"}\n]}",
    "hash": "7287f6f92b999e12e36c6ae166e15acc8333b1f59d394cecd750e64ae973e946",
    "Created": "2023-12-05T14:09:48.3272953Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'Response: %hello%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutResponse\",\n\"StepDescription\": \"Write out the string 'Response: ' followed by the value of the variable %hello%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutResponse\",\n\"StepDescription\": \"Write out the string 'Response: ' followed by the value of the variable %hello%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "b9fb8a373d3ab907c31c563ee44623772b24d951c60c9d0ad693621177d79f3e",
    "Created": "2023-12-05T14:09:53.875335Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'Response: %hello%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"Response: %hello%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"Response: %hello%\"}]}",
    "hash": "3afd96278cc0437df58628acfaee3dc0c87abc42aba1522ace091803e9f917fd",
    "Created": "2023-12-05T14:09:57.459939Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "use complex algo to add 2 and 3, write to %result%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AdditionStep\",\n\"StepDescription\": \"Use a complex algorithm to add the numbers 2 and 3, and store the result in the variable %result%\",\n\"Modules\": [\"PLang.Modules.PythonModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AdditionStep\",\n\"StepDescription\": \"Use a complex algorithm to add the numbers 2 and 3, and store the result in the variable %result%\",\n\"Modules\": [\"PLang.Modules.PythonModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "2fb42e735e3a6709898581c30ff7202d511de9f1cf942de9caf2cdd3e29c0961",
    "Created": "2023-12-05T14:10:01.8425758Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: use complex algo to add 2 and 3, write to %result%",
      "assistant": "## functions available defined in csharp ##\r\nDictionary`2 RunPythonScript(String? fileName = main.py, String[]? parameterValues, String[]? parameterNames, String[]? variablesToExtractFromPythonScript, Boolean? useNamedArguments = False, Boolean? useTerminal = False, String? pythonPath, String? stdOutVariableName, String? stdErrorVariableName)  // Run a python script. parameterNames should be equal length as parameterValues. Parameter example name=%name%. variablesToExtractFromPythonScript are keys in the format [a-zA-Z0-9_\\.]+ that the user want to write to. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"N/A\", \"Parameters\": [], \"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"N/A\", \"Parameters\": [], \"ReturnValue\": null}",
    "hash": "a3a20f225e151a23eaae465b6c0089a35a9a4ee29b84ae32e074b7dfd6a13405",
    "Created": "2023-12-05T14:10:03.955558Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "use complex algo to add 2 and 3, write to %result%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AdditionStep\",\n\"StepDescription\": \"Use a complex algorithm to add the numbers 2 and 3, and store the result in the variable %result%\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\", \"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AdditionStep\",\n\"StepDescription\": \"Use a complex algorithm to add the numbers 2 and 3, and store the result in the variable %result%\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\", \"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "7af6c3807852a8510a2563ca776f0738e5efe58ed935716fb9e9722a342c1b9d",
    "Created": "2023-12-05T14:10:12.3440698Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: use complex algo to add 2 and 3, write to %result%",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"N/A\",\n\"Parameters\": [],\n\"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"N/A\",\n\"Parameters\": [],\n\"ReturnValue\": null}",
    "hash": "d2da8b6c37d17c52390add6fc62166c0c68bf80fea126fec9d86eb2b138627e3",
    "Created": "2023-12-05T14:10:14.6042057Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "use complex algo to add 2 and 3, write to %result%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AdditionStep\",\n\"StepDescription\": \"Use a complex algorithm to add the numbers 2 and 3, and store the result in the variable %result%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AdditionStep\",\n\"StepDescription\": \"Use a complex algorithm to add the numbers 2 and 3, and store the result in the variable %result%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "442d7cbb7635ac964981bab47a6673855cc3c878f17fd04d71e6683166646c5d",
    "Created": "2023-12-05T14:10:18.2693167Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: use complex algo to add 2 and 3, write to %result%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class ComplexAlgo\n{\n    public static void Process(out dynamic result)\n    {\n        try\n        {\n            result = 2 + 3;\n        }\n        catch\n        {\n            throw new Exception(\"There was a problem performing the operation.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"ComplexAlgo\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class ComplexAlgo\n{\n    public static void Process(out dynamic result)\n    {\n        try\n        {\n            result = 2 + 3;\n        }\n        catch\n        {\n            throw new Exception(\"There was a problem performing the operation.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"ComplexAlgo\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "1ccd8255d9cbf893f6bb9feb831584a544e1a362b18143693be49be365f0311c",
    "Created": "2023-12-05T14:10:25.4262672Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: use complex algo to add 2 and 3, write to %result%",
      "assistant": "\nName cannot be: 01. AdditionStep\n== Code generated by ChatGPT in previous request, start ==\n\npublic static class ComplexAlgo\n{\n    public static void Process(out dynamic result)\n    {\n        try\n        {\n            result = 2 + 3;\n        }\n        catch\n        {\n            throw new Exception(\"There was a problem performing the operation.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(12,23): error CS0246: The type or namespace name 'Exception' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class ComplexAlgo\n{\n    public static void Process(out dynamic result)\n    {\n        try\n        {\n            result = 2 + 3;\n        }\n        catch\n        {\n            throw new System.Exception(\"There was a problem performing the operation.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"ComplexAlgo\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class ComplexAlgo\n{\n    public static void Process(out dynamic result)\n    {\n        try\n        {\n            result = 2 + 3;\n        }\n        catch\n        {\n            throw new System.Exception(\"There was a problem performing the operation.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"ComplexAlgo\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "0285f978ac4e6f69075e6875eb9c5c2fdecad48c83a9cebaf6a248edcca9d2c4",
    "Created": "2023-12-05T14:10:33.0863203Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %result%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutResult\",\n\"StepDescription\": \"Write out the value of the variable 'result' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutResult\",\n\"StepDescription\": \"Write out the value of the variable 'result' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "e3905faebe413bca1c33a4508e14207db27c82905b6187ebe5760aab8653b2e1",
    "Created": "2023-12-05T14:10:36.6519985Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %result%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%result%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"writeToBuffer\",\n\"Value\": false},\n{\"Type\": \"String\",\n\"Name\": \"type\",\n\"Value\": \"text\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%result%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"writeToBuffer\",\n\"Value\": false},\n{\"Type\": \"String\",\n\"Name\": \"type\",\n\"Value\": \"text\"}]}",
    "hash": "d4a75b462944b4c098bbbb8a0c5ec69b9ed721817307636130374e30d2714985",
    "Created": "2023-12-05T14:10:46.5206824Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get all available settings, write to %settings%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetAllSettings\",\n\"StepDescription\": \"Retrieve all available settings and store them in the variable %settings%\",\n\"Modules\": [\"PLang.Modules.CultureInfoModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetAllSettings\",\n\"StepDescription\": \"Retrieve all available settings and store them in the variable %settings%\",\n\"Modules\": [\"PLang.Modules.CultureInfoModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "2df8b40be81da891969324d903d85bdfe8b32abea8b398d7cf046761bd0d0466",
    "Created": "2023-12-05T14:10:52.6308483Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get all available settings, write to %settings%",
      "assistant": "## functions available defined in csharp ##\r\nvoid SetCultureLanguageCode(String? code = en-US)  // Make sure to convert user code to valid BCP 47 code. \nvoid SetCultureUILanguageCode(String? code = en-US)  // Make sure to convert user code to valid BCP 47 code. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"N/A\", \"Parameters\": [], \"ReturnValue\": null}"
    },
    "answer": "{\"FunctionName\": \"N/A\", \"Parameters\": [], \"ReturnValue\": null}",
    "hash": "8208ef6a4764acdee460f8188d53433b9957a3bce84d0d3fba49bdcd0cee804b",
    "Created": "2023-12-05T14:10:54.422044Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get all available settings, write to %settings%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetAllSettings\",\n\"StepDescription\": \"Retrieve all available settings and store them in the variable %settings%\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetAllSettings\",\n\"StepDescription\": \"Retrieve all available settings and store them in the variable %settings%\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "b82c397368b02567f82ff8934829ca4da11c70c58d47dba96a29c729891a9d96",
    "Created": "2023-12-05T14:10:58.0240489Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get all available settings, write to %settings%",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"LoadVariables\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"key\",\n\"Value\": \"%Settings.Get(\\\"settingName\\\", \\\"\\\", \\\"Explain\\\")%\"}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"settings\"}}"
    },
    "answer": "{\"FunctionName\": \"LoadVariables\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"key\",\n\"Value\": \"%Settings.Get(\\\"settingName\\\", \\\"\\\", \\\"Explain\\\")%\"}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"settings\"}}",
    "hash": "db63edad7070df2043fb48d1bd01b3a8f3cf1bf5c13d7191d76c2e4495e0a64b",
    "Created": "2023-12-05T14:11:03.220863Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"Except\"?: string[]},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "go through each %settings%, call !Modules",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%settings%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"IterateSettingsAndCallModules\",\n\"StepDescription\": \"The step involves iterating through each item in the 'settings' variable and calling the 'Modules' function for each item.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"IterateSettingsAndCallModules\",\n\"StepDescription\": \"The step involves iterating through each item in the 'settings' variable and calling the 'Modules' function for each item.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "b3680f433d0bbd9a35db0344d2c12088231c4711851ebe9ea2d7982c9e2aebe4",
    "Created": "2023-12-05T14:11:11.2233717Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %files%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%files%(List`1), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutFiles\",\n\"StepDescription\": \"Write out the content of the variable %files%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutFiles\",\n\"StepDescription\": \"Write out the content of the variable %files%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "93d6e6fef2efb3a5d7c7be0b9573fb36707ca0d3edd04e3ef5c725ade9266148",
    "Created": "2023-12-05T15:17:48.3890206Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %files%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfiles(List`1), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\", \"Parameters\": [{\"Type\": \"List`1\", \"Name\": \"files\", \"Value\": \"%files%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\", \"Parameters\": [{\"Type\": \"List`1\", \"Name\": \"files\", \"Value\": \"%files%\"}]}",
    "hash": "013a042e5e04529df8cc125135b0adb8c6509895b5a5484d449c141973aa0776",
    "Created": "2023-12-05T15:17:52.1599624Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "foreach %files%, call !LoadText",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%files%(List`1), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ForEachLoadText\",\n\"StepDescription\": \"For each file in the list of files, call the function 'LoadText' to load the text from the file.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ForEachLoadText\",\n\"StepDescription\": \"For each file in the list of files, call the function 'LoadText' to load the text from the file.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "1e0e0811d5509028c5c8268600165f1364516f47cc9fe758fc5fb8a1132a3e0e",
    "Created": "2023-12-05T15:17:58.8866605Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: foreach %files%, call !LoadText",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2<String>? parameters) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nfiles(List`1), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\n        \"Type\": \"String\",\n        \"Name\": \"variableToLoopThrough\",\n        \"Value\": \"%files%\"\n    },\n    {\n        \"Type\": \"String\",\n        \"Name\": \"goalNameToCall\",\n        \"Value\": \"LoadText\"\n    }\n]\n}"
    },
    "answer": "{\n\"FunctionName\": \"RunLoop\",\n\"Parameters\": [\n    {\n        \"Type\": \"String\",\n        \"Name\": \"variableToLoopThrough\",\n        \"Value\": \"%files%\"\n    },\n    {\n        \"Type\": \"String\",\n        \"Name\": \"goalNameToCall\",\n        \"Value\": \"LoadText\"\n    }\n]\n}",
    "hash": "6aa948084fada86c1eab866dae7d9c2c5f781e5d18b4675bfeca194d48b3a419",
    "Created": "2023-12-05T15:18:03.9351111Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write %content% to examples.txt",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write the content stored in the variable 'content' to a file named 'examples.txt'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteToFile\",\n\"StepDescription\": \"Write the content stored in the variable 'content' to a file named 'examples.txt'\",\n\"Modules\": [\"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}",
    "hash": "145c451a7e9ec40c5cd36bad8ee10f58be6100937c053eade54a059a5ed9de47",
    "Created": "2023-12-05T15:18:10.1791154Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write %content% to examples.txt",
      "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path) \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files) \nList`1 ReadMultipleTextFiles(String folderPath, String searchPattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String? directoryPath = ./, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \nvoid ListenToFileChange(String[] fileSearchPatterns, String goalToCall, String[]? excludeFiles, Boolean? includeSubdirectories = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"examples.txt\"},\n    {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"%content%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": false}\n]}"
    },
    "answer": "{\"FunctionName\": \"WriteToFile\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"path\", \"Value\": \"examples.txt\"},\n    {\"Type\": \"String\", \"Name\": \"content\", \"Value\": \"%content%\"},\n    {\"Type\": \"Boolean\", \"Name\": \"overwrite\", \"Value\": false}\n]}",
    "hash": "950669d15863de251aabdfe17b955e956c48d21ca1ee30a0ead487295f2dca1c",
    "Created": "2023-12-05T15:18:17.3510828Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %item.Content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutContent\",\n\"StepDescription\": \"This step involves writing out the content of the variable 'item.Content' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutContent\",\n\"StepDescription\": \"This step involves writing out the content of the variable 'item.Content' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "4e0492b2a5b6c88f01384991f389d440f397551d0da79916138242c06a00eddb",
    "Created": "2023-12-05T15:18:23.4396122Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %item.Content%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%item.Content%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"Object\",\n\"Name\": \"content\",\n\"Value\": \"%item.Content%\"}]}",
    "hash": "c036b3bd0c7eb654a4797b1ae2ec88daefccfe5800c87aad237e5f4f7ec5b676",
    "Created": "2023-12-05T15:18:28.4414773Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[var] append to variable %content%, %item.Content%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LocalOrGlobalVariableModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"This step involves appending the content of the variable 'item.Content' to the existing variable 'content'.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"This step involves appending the content of the variable 'item.Content' to the existing variable 'content'.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "96b2717d032a5bbdc8954e62cac6820e0af270ff3c8041b4facf9a0a2bbd2050",
    "Created": "2023-12-05T15:18:33.7445474Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [var] append to variable %content%, %item.Content%",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nvoid AppendToVariable(String key, Object value, Char? seperator = \n)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToVariable\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"object\", \"Name\": \"value\", \"Value\": \"%item.Content%\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AppendToVariable\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"object\", \"Name\": \"value\", \"Value\": \"%item.Content%\"}\n]}",
    "hash": "ab4ef8ce797a3d3a6c6d08df7f2b9c9e595ec104a7f831f11601b7db2518850a",
    "Created": "2023-12-05T15:18:39.3873925Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] get file name without extension from abosolute path %item.Path%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFileNameWithoutExtension\",\n\"StepDescription\": \"Extract the file name without its extension from the absolute path stored in the variable %item.Path%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetFileNameWithoutExtension\",\n\"StepDescription\": \"Extract the file name without its extension from the absolute path stored in the variable %item.Path%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "df9768b1320987f0b49f190a7200b1c9a3247b4e52da4cbd2b03ab149f7757d7",
    "Created": "2023-12-07T11:03:42.4013167Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get file name without extension from abosolute path %item.Path%",
      "assistant": "\nName cannot be: \n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = System.IO.Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = System.IO.Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "7377b104d21b309562ec603edba4b662cb16f8b24e6a4ba6c74c241bf9a6caa3",
    "Created": "2023-12-07T11:03:58.0609198Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get file name without extension from abosolute path %item.Path%",
      "assistant": "\nName cannot be: \n== Code generated by ChatGPT in previous request, start ==\nusing System.IO;\r\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = PLang.SafeFileSystem.Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors: result is not in user command\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "08b25fd5e20dc9df520025a4eec92e768a68622703ad874a3ad4818947034b00",
    "Created": "2023-12-07T11:04:11.5912802Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get file name without extension from abosolute path %item.Path%",
      "assistant": "\nName cannot be: \n== Code generated by ChatGPT in previous request, start ==\n\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors: result is not in user command\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string result)\n    {\n        try\n        {\n            result = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "be4c01b34e054f71a698d826266bdb042c89ab96cc115c86991e3ffa98c7044b",
    "Created": "2023-12-07T11:04:25.5795847Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] get file name without extension from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFileNameWithoutExtension\",\n\"StepDescription\": \"Extract the file name without its extension from the absolute path stored in the variable 'item.Path', and then write this file name to the variable 'moduleName'.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetFileNameWithoutExtension\",\n\"StepDescription\": \"Extract the file name without its extension from the absolute path stored in the variable 'item.Path', and then write this file name to the variable 'moduleName'.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "225a0c1feb71a268c291d8c82e14b7b28990526a20aff09e9f3c2da1873707f7",
    "Created": "2023-12-07T11:05:55.8125867Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get file name without extension from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "\nName cannot be: \n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = System.IO.Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = System.IO.Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "344d8adc941cb50f04297584fb99a212d02ab7be0bd3624c74e03379a8e7737a",
    "Created": "2023-12-07T11:06:09.8844558Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get file name without extension from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "\nName cannot be: 01. GetFileNameWithoutExtension\n== Code generated by ChatGPT in previous request, start ==\nusing System.IO;\r\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = PLang.SafeFileSystem.Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(9,26): error CS0103: The name 'PLang' does not exist in the current context\n(13,23): error CS0246: The type or namespace name 'Exception' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n    \"Using\": [\"System\", \"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFileNameWithoutExtensionFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = Path.GetFileNameWithoutExtension(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the file name without extension from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFileNameWithoutExtensionFromAbsolutePath\",\n    \"Using\": [\"System\", \"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "dae5e6ef264084ec0e0bafcec9dfefeaf50b90a6ffa739a5692aaff07ddad007",
    "Created": "2023-12-07T11:06:19.2052975Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "go through each %settings%, call !Modules",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%settings%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"IterateSettingsAndCallModules\",\n\"StepDescription\": \"Iterate through each item in the 'settings' variable and call the 'Modules' function for each item.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"IterateSettingsAndCallModules\",\n\"StepDescription\": \"Iterate through each item in the 'settings' variable and call the 'Modules' function for each item.\",\n\"Modules\": [\"PLang.Modules.LoopModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "b6c3578ec82fe988405f96da2d335377e42b39a39224337e80e1f03c50e0f7c3",
    "Created": "2023-12-07T11:06:28.7390254Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: go through each %settings%, call !Modules",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunLoop(String variableToLoopThrough, String goalNameToCall, Dictionary`2<String>? parameters) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nsettings(Object), \r\n## defined variables ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunLoop\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"variableToLoopThrough\",\n      \"Value\": \"%settings%\"\n    },\n    {\n      \"Type\": \"String\",\n      \"Name\": \"goalNameToCall\",\n      \"Value\": \"!Modules\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunLoop\",\n  \"Parameters\": [\n    {\n      \"Type\": \"String\",\n      \"Name\": \"variableToLoopThrough\",\n      \"Value\": \"%settings%\"\n    },\n    {\n      \"Type\": \"String\",\n      \"Name\": \"goalNameToCall\",\n      \"Value\": \"!Modules\"\n    },\n    {\n      \"Type\": \"Dictionary`2<String>\",\n      \"Name\": \"parameters\",\n      \"Value\": null\n    }\n  ]\n}",
    "hash": "cc333767846b28ec4e4b839df330927c7fa6476f6ac74cd987992ca124fa7e02",
    "Created": "2023-12-07T11:06:41.559799Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "ask user, 'What settings would you like to access, type in nr.', into %nr%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AskUserForSettings\",\n\"StepDescription\": \"Ask the user to input the number corresponding to the settings they would like to access and store the input in the variable %nr%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AskUserForSettings\",\n\"StepDescription\": \"Ask the user to input the number corresponding to the settings they would like to access and store the input in the variable %nr%\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "13df431111f09290207a47b7b58d7c158269d2bd4bbce060875b8d1ef369ef0b",
    "Created": "2023-12-07T11:06:46.7194908Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: ask user, 'What settings would you like to access, type in nr.', into %nr%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Ask\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"What settings would you like to access, type in nr.\"},\n{\"Type\": \"string\",\n\"Name\": \"type\",\n\"Value\": \"text\"}],\n\"ReturnValue\": {\"Type\": \"string\",\n\"VariableName\": \"nr\"}}"
    },
    "answer": "{\"FunctionName\": \"Ask\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"What settings would you like to access, type in nr.\"},\n{\"Type\": \"string\",\n\"Name\": \"type\",\n\"Value\": \"text\"}],\n\"ReturnValue\": {\"Type\": \"string\",\n\"VariableName\": \"nr\"}}",
    "hash": "387d626542392a5874fdbdf3535de516c1260e8b52020882b2fc9ffc3604ed31",
    "Created": "2023-12-07T11:06:53.6653261Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "if %nr% is a number then call !ModuleSetting , else call !Start",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%nr%(string), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CheckNumberAndCallModule\",\n\"StepDescription\": \"This step checks if the variable %nr% is a number. If it is, the function !ModuleSetting is called. If it is not, the function !Start is called.\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CheckNumberAndCallModule\",\n\"StepDescription\": \"This step checks if the variable %nr% is a number. If it is, the function !ModuleSetting is called. If it is not, the function !Start is called.\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "5b7db5e19380539976329303182bd3c6bca0eb22334a0b1f9e2973a1fa0e8c6e",
    "Created": "2023-12-07T11:06:58.7149579Z"
  },
  {
    "question": {
      "type": "PLang.Modules.ConditionalModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The code generated should have 1 method with the static method named Process and return bool. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\nStatement should return true\r\n\r\nThe code will not be modified after it's generated.\r\nALWAYS use long or long? instead of int or int?\r\nName: is CamelCase name of class\r\nGoals should be prefixed with !, e.g. Call !Process, Call !ConditionFalse\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\nDo not reference any DTO classes. Use dynamic.\r\n\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: if %nr% is a number then call !ModuleSetting , else call !Start",
      "assistant": "## defined variables ##\r\nnr(string), \r\n## defined variables ##\nName cannot be: \n## examples ##\r\n'if %isValid% is true then', this condition would return true if %isValid% is true. \r\n'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.\r\n\r\n'if %data% (string) is null, call !CreateData, else !AppendData' => return string.IsNullOrEmpty(userIdentity);\r\n'if %exists% (bool) is null, call !CreateUser' => return exists == null;\r\n'if %exists% (bool) is not null, call !CreateUser' => return exists != null;\r\n'if %data% is empty, call !CreateUser' => return (data == null || (data is string str && string.IsNullOrEmpty(str))); //if we dont know the type of %data%\r\n## examples ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class CamelCase\n{\n    public static bool Process(string nr)\n    {\n        if (long.TryParse(nr, out _))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"CamelCase\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": \"ModuleSetting\",\n    \"GoalToCallOnFalse\": \"Start\"\n}\n```"
    },
    "answer": "```csharp\npublic static class CamelCase\n{\n    public static bool Process(string nr)\n    {\n        if (long.TryParse(nr, out _))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"CamelCase\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": \"ModuleSetting\",\n    \"GoalToCallOnFalse\": \"Start\"\n}\n```",
    "hash": "b081884b30cf6987ef9cf5e3221606c2554d294884bee5b681fb33da6d5210c4",
    "Created": "2023-12-07T11:07:08.2630172Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out '%idx%. %item.FullName%'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutFullName\",\n\"StepDescription\": \"Write out the full name of the item at the given index\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutFullName\",\n\"StepDescription\": \"Write out the full name of the item at the given index\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "119d8b15a3905c6259adccaaa0b0f1ba0dcd5697a69d62961ea47da34d5583ed",
    "Created": "2023-12-07T11:07:15.1783821Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out '%idx%. %item.FullName%'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"%idx%. %item.FullName%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"%idx%. %item.FullName%\"}]}",
    "hash": "37c2073513ced00bdf1733a5939850b921ddfb643dfaf683f75b28775ec6ee23",
    "Created": "2023-12-07T11:07:20.6190668Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write '=== %moduleName% starts ===",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteModuleStart\",\n\"StepDescription\": \"Write a string that includes the variable 'moduleName' and surrounds it with '=== %moduleName% starts ==='\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteModuleStart\",\n\"StepDescription\": \"Write a string that includes the variable 'moduleName' and surrounds it with '=== %moduleName% starts ==='\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "9f8cdd30fe205644c13e802f18dd9f13a7b6d464aebaabd7a30d7f2e24892b37",
    "Created": "2023-12-07T11:07:40.426605Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write '=== %moduleName% starts ===",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"=== %moduleName% starts ===\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"=== %moduleName% starts ===\"}]}",
    "hash": "2bb8bc50bc39eb632d7e380e6a6fe2498c384a62bdae6c80f6d277d89ba75bb9",
    "Created": "2023-12-07T11:07:45.2949192Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[settings] get all method in settings %module%, write to %methods%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetAllMethodsInSettingsModule\",\n\"StepDescription\": \"Retrieve all methods in the specified settings module and write them to the 'methods' variable.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\", \"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetAllMethodsInSettingsModule\",\n\"StepDescription\": \"Retrieve all methods in the specified settings module and write them to the 'methods' variable.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\", \"PLang.Modules.FileModule\"],\n\"WaitForExecution\": true}",
    "hash": "7bc75b9ffd12a3b4f5d38511d24a5ca051346a2a4b74c75326d17846376911eb",
    "Created": "2023-12-07T11:07:53.8724104Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [settings] get all method in settings %module%, write to %methods%",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nvoid AppendToVariable(String key, Object value, Char? seperator = \n)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"LoadVariables\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"key\",\n\"Value\": \"%module%\"}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"%methods%\"}}"
    },
    "answer": "{\"FunctionName\": \"LoadVariables\",\n\"Parameters\": [{\"Type\": \"String\",\n\"Name\": \"key\",\n\"Value\": \"%module%\"}],\n\"ReturnValue\": {\"Type\": \"Object\",\n\"VariableName\": \"%methods%\"}}",
    "hash": "735e4d69406824fd451c9b6f875e23aab36c08a0074c4a3ebf4d1b3ca16653b2",
    "Created": "2023-12-07T11:07:58.9747605Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[llm] system: These are methods available, convert them to natural language\n        put them in numbered list\n        assistant: %methods%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LlmModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%methods%(Object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ConvertMethodsToNaturalLanguage\",\n\"StepDescription\": \"Convert the methods available into natural language and put them in a numbered list\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"ConvertMethodsToNaturalLanguage\",\n\"StepDescription\": \"Convert the methods available into natural language and put them in a numbered list\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true}",
    "hash": "20e7c4ff4de4ede8f88bdbdaf38c228c2992e547f260662e523fdab0ec19d593",
    "Created": "2023-12-07T11:08:05.998085Z"
  },
  {
    "question": {
      "type": "PLang.Modules.LlmModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [llm] system: These are methods available, convert them to natural language\n        put them in numbered list\n        assistant: %methods%",
      "assistant": "## functions available defined in csharp ##\r\nvoid AskLlm(String? scheme = {Result:string}, String? system, String? assistant, String? user, String? model = gpt-4, Double? tempature = 0, Double? topP = 0, Double? frequencyPenalty = 0, Double? presencePenalty = 0, Boolean? cacheResponse = True) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nmethods(Object), \r\n## defined variables ##\nThe following user request is for constructing a message to LLM engine\r\n\r\nDetermine what part is system, assistant and user properties. If you cannot map it, the whole user request should be on user property\r\nDetermine the scheme, it is the json scheme that the llm is expected to return, this is required and cannot be empty string. If scheme is not defined, the scheme is created from variables the user expects to write to\r\nIf user expects the result to be written into variables, then those are in the scheme:\r\n\r\n## examples ##\r\nsystem: do stuff, user: this is data from user, write to %data%, %output% and %dest% => scheme: {data:object, output:object, dest:object}\r\nsystem: setup up system, asssistant: some assistant stuff, user: this is data from user, scheme: {data:string, year:number, name:string} => scheme:  {data:string, year:number, name:string}\r\n## examples ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"system\", \"Value\": \"These are methods available, convert them to natural language\\nput them in numbered list\"},\n    {\"Type\": \"string\", \"Name\": \"assistant\", \"Value\": \"%methods%\"},\n    {\"Type\": \"string\", \"Name\": \"scheme\", \"Value\": \"{Result:string}\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"system\", \"Value\": \"These are methods available, convert them to natural language\\nput them in numbered list\"},\n    {\"Type\": \"string\", \"Name\": \"assistant\", \"Value\": \"%methods%\"},\n    {\"Type\": \"string\", \"Name\": \"scheme\", \"Value\": \"{Result:string}\"}\n]}",
    "hash": "6e7d1fdf7a83aa5ae2094f697148d7cf48c07210f3ec750aad535717a2cc0cf2",
    "Created": "2023-12-07T11:08:12.1306675Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "ask user, input= %result%, write to %methodSelected%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AskUserInput\",\n\"StepDescription\": \"Ask the user for input and store the response in the variable %result%. Then, write the response to the variable %methodSelected%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AskUserInput\",\n\"StepDescription\": \"Ask the user for input and store the response in the variable %result%. Then, write the response to the variable %methodSelected%.\",\n\"Modules\": [\"PLang.Modules.OutputModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "443e87d96671f6d566695c7f91b19d3fa1be14af784b7d385785f0ca197aa364",
    "Created": "2023-12-07T11:08:17.3949659Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: ask user, input= %result%, write to %methodSelected%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Ask\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%result%\"}],\n\"ReturnValue\": {\"Type\": \"string\",\n\"VariableName\": \"%methodSelected%\"}}"
    },
    "answer": "{\"FunctionName\": \"Ask\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"text\",\n\"Value\": \"%result%\"}],\n\"ReturnValue\": {\"Type\": \"string\",\n\"VariableName\": \"%methodSelected%\"}}",
    "hash": "9b65b898e142a99b938cb8a578b81b8ca04b3a62b1e6c567bf2a54388fa2ab37",
    "Created": "2023-12-07T11:08:20.7318589Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[llm] system: format user input to match method that is provided,\n            if no method fits, return {error:string},\n        assistant: %methods%\n        user: %methodSelected%\n        write to %methodMapping%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LlmModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%methods%(Object), %methodSelected%(string), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"FormatUserInput\",\n\"StepDescription\": \"Format the user input to match the method that is provided. If no method fits, return an error. The methods are provided by the assistant and the selected method is provided by the user. The result is written to the methodMapping variable.\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"FormatUserInput\",\n\"StepDescription\": \"Format the user input to match the method that is provided. If no method fits, return an error. The methods are provided by the assistant and the selected method is provided by the user. The result is written to the methodMapping variable.\",\n\"Modules\": [\"PLang.Modules.LlmModule\"],\n\"WaitForExecution\": true}",
    "hash": "2590a11cee9520e9e1856558e3c141ac7274ca8da589616ae9881087812cd764",
    "Created": "2023-12-07T11:08:29.4907244Z"
  },
  {
    "question": {
      "type": "PLang.Modules.LlmModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [llm] system: format user input to match method that is provided,\n            if no method fits, return {error:string},\n        assistant: %methods%\n        user: %methodSelected%\n        write to %methodMapping%",
      "assistant": "## functions available defined in csharp ##\r\nvoid AskLlm(String? scheme = {Result:string}, String? system, String? assistant, String? user, String? model = gpt-4, Double? tempature = 0, Double? topP = 0, Double? frequencyPenalty = 0, Double? presencePenalty = 0, Boolean? cacheResponse = True) \n\r\n## functions available ends ##\r\n## defined variables ##\r\nmethods(Object), methodSelected(string), \r\n## defined variables ##\nThe following user request is for constructing a message to LLM engine\r\n\r\nDetermine what part is system, assistant and user properties. If you cannot map it, the whole user request should be on user property\r\nDetermine the scheme, it is the json scheme that the llm is expected to return, this is required and cannot be empty string. If scheme is not defined, the scheme is created from variables the user expects to write to\r\nIf user expects the result to be written into variables, then those are in the scheme:\r\n\r\n## examples ##\r\nsystem: do stuff, user: this is data from user, write to %data%, %output% and %dest% => scheme: {data:object, output:object, dest:object}\r\nsystem: setup up system, asssistant: some assistant stuff, user: this is data from user, scheme: {data:string, year:number, name:string} => scheme:  {data:string, year:number, name:string}\r\n## examples ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"scheme\", \"Value\": \"{methodMapping:object, error:string}\"},\n    {\"Type\": \"string\", \"Name\": \"system\", \"Value\": \"format user input to match method that is provided, if no method fits, return {error:string}\"},\n    {\"Type\": \"string\", \"Name\": \"assistant\", \"Value\": \"%methods%\"},\n    {\"Type\": \"string\", \"Name\": \"user\", \"Value\": \"%methodSelected%\"}\n],\n\"ReturnValue\": {\"Type\": \"object\", \"VariableName\": \"methodMapping\"}}"
    },
    "answer": "{\"FunctionName\": \"AskLlm\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"scheme\", \"Value\": \"{methodMapping:object, error:string}\"},\n    {\"Type\": \"string\", \"Name\": \"system\", \"Value\": \"format user input to match method that is provided, if no method fits, return {error:string}\"},\n    {\"Type\": \"string\", \"Name\": \"assistant\", \"Value\": \"%methods%\"},\n    {\"Type\": \"string\", \"Name\": \"user\", \"Value\": \"%methodSelected%\"}\n],\n\"ReturnValue\": {\"Type\": \"object\", \"VariableName\": \"methodMapping\"}}",
    "hash": "1766acc6e4f389ab81c43dfd1c6ae6e0848b695c9673848c96ac95f9c547474a",
    "Created": "2023-12-07T11:08:39.1733063Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[settings] call dynamic method with %methodMapping%, write to %result%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n\r\n## variables available ##\r\n%methodMapping%(object), \r\n## variables available ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallDynamicMethod\",\n\"StepDescription\": \"This step involves calling a dynamic method using the 'methodMapping' variable and storing the result in the 'result' variable.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallDynamicMethod\",\n\"StepDescription\": \"This step involves calling a dynamic method using the 'methodMapping' variable and storing the result in the 'result' variable.\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "6845b214fd15248a009963a7b4948ce02ceba73b989e9c02e29df1a58f5b0126",
    "Created": "2023-12-07T11:08:46.5112493Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [settings] call dynamic method with %methodMapping%, write to %result%",
      "assistant": "## defined variables ##\r\nmethodMapping(object), \r\n## defined variables ##\nName cannot be: \n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class CamelCase\n{\n    public static void Process(dynamic methodMapping, out dynamic result)\n    {\n        try\n        {\n            result = methodMapping();\n        }\n        catch\n        {\n            throw new Exception(\"There was an error while processing your request. Please try again.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"CamelCase\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class CamelCase\n{\n    public static void Process(dynamic methodMapping, out dynamic result)\n    {\n        try\n        {\n            result = methodMapping();\n        }\n        catch\n        {\n            throw new Exception(\"There was an error while processing your request. Please try again.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"CamelCase\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "c08e1da360daab60a182d81549c1f659ff127f5cc0c12bf8a8e4c4808dccb63c",
    "Created": "2023-12-07T11:08:58.4600544Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [settings] call dynamic method with %methodMapping%, write to %result%",
      "assistant": "## defined variables ##\r\nmethodMapping(object), \r\n## defined variables ##\nName cannot be: 05. CallDynamicMethod\n== Code generated by ChatGPT in previous request, start ==\n\npublic static class CamelCase\n{\n    public static void Process(dynamic methodMapping, out dynamic result)\n    {\n        try\n        {\n            result = methodMapping();\n        }\n        catch\n        {\n            throw new Exception(\"There was an error while processing your request. Please try again.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(12,23): error CS0246: The type or namespace name 'Exception' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class CamelCase\n{\n    public static void Process(dynamic methodMapping, out dynamic result)\n    {\n        try\n        {\n            result = methodMapping();\n        }\n        catch\n        {\n            throw new System.Exception(\"There was an error while processing your request. Please try again.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"CamelCase\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class CamelCase\n{\n    public static void Process(dynamic methodMapping, out dynamic result)\n    {\n        try\n        {\n            result = methodMapping();\n        }\n        catch\n        {\n            throw new System.Exception(\"There was an error while processing your request. Please try again.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"CamelCase\",\n  \"Using\": [\"System\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "611fc14fbd35dba480783025c2877fd3513f35dc9eca87fa74cabc81d7bc318f",
    "Created": "2023-12-07T11:09:10.4448673Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "if %result% is false",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CheckResult\",\n\"StepDescription\": \"Check if the variable 'result' is false\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CheckResult\",\n\"StepDescription\": \"Check if the variable 'result' is false\",\n\"Modules\": [\"PLang.Modules.ConditionalModule\"],\n\"WaitForExecution\": true}",
    "hash": "53f7d8803917b09f2b9305f119449e9281ed391b7e69dab939c3756fb4fffd70",
    "Created": "2023-12-07T11:09:14.8504485Z"
  },
  {
    "question": {
      "type": "PLang.Modules.ConditionalModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The code generated should have 1 method with the static method named Process and return bool. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\nStatement should return true\r\n\r\nThe code will not be modified after it's generated.\r\nALWAYS use long or long? instead of int or int?\r\nName: is CamelCase name of class\r\nGoals should be prefixed with !, e.g. Call !Process, Call !ConditionFalse\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\nDo not reference any DTO classes. Use dynamic.\r\n\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: if %result% is false",
      "assistant": "\nName cannot be: 05. CallDynamicMethod\n## examples ##\r\n'if %isValid% is true then', this condition would return true if %isValid% is true. \r\n'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.\r\n\r\n'if %data% (string) is null, call !CreateData, else !AppendData' => return string.IsNullOrEmpty(userIdentity);\r\n'if %exists% (bool) is null, call !CreateUser' => return exists == null;\r\n'if %exists% (bool) is not null, call !CreateUser' => return exists != null;\r\n'if %data% is empty, call !CreateUser' => return (data == null || (data is string str && string.IsNullOrEmpty(str))); //if we dont know the type of %data%\r\n## examples ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class ResultCheck\n{\n    public static bool Process(long? result)\n    {\n        return result == false;\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"ResultCheck\",\n  \"GoalToCallOnTrue\": \"!Process\"\n}\n```"
    },
    "answer": "```csharp\npublic static class ResultCheck\n{\n    public static bool Process(long? result)\n    {\n        return result == false;\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"ResultCheck\",\n  \"GoalToCallOnTrue\": \"!Process\"\n}\n```",
    "hash": "9a2bec506cfcf365925cceb1558fbb76d529e09bfe7135f25c5062d632c0ef01",
    "Created": "2023-12-07T11:09:21.1166746Z"
  },
  {
    "question": {
      "type": "PLang.Modules.ConditionalModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The code generated should have 1 method with the static method named Process and return bool. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\nStatement should return true\r\n\r\nThe code will not be modified after it's generated.\r\nALWAYS use long or long? instead of int or int?\r\nName: is CamelCase name of class\r\nGoals should be prefixed with !, e.g. Call !Process, Call !ConditionFalse\r\nAll strings in Implementation need be in single quote ('). The Code implementation cannot include double quote (\")\r\nDo not reference any DTO classes. Use dynamic.\r\n\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: if %result% is false",
      "assistant": "\nName cannot be: 05. CallDynamicMethod, 06. CheckResult\n## examples ##\r\n'if %isValid% is true then', this condition would return true if %isValid% is true. \r\n'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.\r\n\r\n'if %data% (string) is null, call !CreateData, else !AppendData' => return string.IsNullOrEmpty(userIdentity);\r\n'if %exists% (bool) is null, call !CreateUser' => return exists == null;\r\n'if %exists% (bool) is not null, call !CreateUser' => return exists != null;\r\n'if %data% is empty, call !CreateUser' => return (data == null || (data is string str && string.IsNullOrEmpty(str))); //if we dont know the type of %data%\r\n## examples ##\r\n== Code generated by ChatGPT in previous request, start ==\n\npublic static class ResultCheck\n{\n    public static bool Process(long? result)\n    {\n        return result == false;\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(6,16): error CS0019: Operator '==' cannot be applied to operands of type 'long?' and 'bool'\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class ResultCheck\n{\n    public static bool Process(long? result)\n    {\n        return result.HasValue && result.Value == 0;\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"ResultCheck\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class ResultCheck\n{\n    public static bool Process(long? result)\n    {\n        return result.HasValue && result.Value == 0;\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"ResultCheck\",\n    \"Using\": null,\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "a8d4160e7e6684d1e632a3705e4e6156de3086f7b05fa1a9b33f3761c0f757aa",
    "Created": "2023-12-07T11:09:29.7431268Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out 'Could not map function'",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputErrorMessage\",\n\"StepDescription\": \"Write out the message 'Could not map function' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputErrorMessage\",\n\"StepDescription\": \"Write out the message 'Could not map function' to the user interface.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "71089a4ba7ccb6ea284e48343ae51b41b98232a494043db3e67e57e4d55abff6",
    "Created": "2023-12-07T11:09:32.9389669Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out 'Could not map function'",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"content\",\n    \"Value\": \"Could not map function\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    },\n    {\n    \"Type\": \"string\",\n    \"Name\": \"type\",\n    \"Value\": \"error\"\n    }\n],\n\"ReturnValue\": null\n}"
    },
    "answer": "{\n\"FunctionName\": \"Write\",\n\"Parameters\": [\n    {\n    \"Type\": \"string\",\n    \"Name\": \"content\",\n    \"Value\": \"Could not map function\"\n    },\n    {\n    \"Type\": \"Boolean\",\n    \"Name\": \"writeToBuffer\",\n    \"Value\": false\n    },\n    {\n    \"Type\": \"string\",\n    \"Name\": \"type\",\n    \"Value\": \"error\"\n    }\n],\n\"ReturnValue\": null\n}",
    "hash": "dd4fe8483bd4164b60ee259f856e0916f40769619f9c278d81fe74bf565e1c21",
    "Created": "2023-12-07T11:09:42.4914667Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "call !ModuleSetting",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"CallModuleSetting\",\n\"StepDescription\": \"This step involves calling the function 'ModuleSetting'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"CallModuleSetting\",\n\"StepDescription\": \"This step involves calling the function 'ModuleSetting'.\",\n\"Modules\": [\"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true}",
    "hash": "b385a5b1b86d4acf70b95aa0f144d2f55d122ddbf12a5838cf5b9bb47dbbeb66",
    "Created": "2023-12-07T11:09:47.430756Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CallGoalModule.Builder",
      "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail.Search %query%, then Gmail.Search is goalName,  %query% is key and value in parameters\r\nFolder.Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: call !ModuleSetting",
      "assistant": "## functions available defined in csharp ##\r\nvoid RunGoal(String goalName, Dictionary`2<String>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"ModuleSetting\"\n    }\n  ]\n}"
    },
    "answer": "{\n  \"FunctionName\": \"RunGoal\",\n  \"Parameters\": [\n    {\n      \"Type\": \"string\",\n      \"Name\": \"goalName\",\n      \"Value\": \"ModuleSetting\"\n    }\n  ]\n}",
    "hash": "756117aa5364bb9f36f521bc7e8c3bc2e2724a7ac460adb5ec390c0a8051f7bf",
    "Created": "2023-12-07T11:09:50.6290044Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[var] append to variable %content%,\n    '=== %moduleName% starts ===\n    %item.Content% \n    === %moduleName% starts ===\n    '",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LocalOrGlobalVariableModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"This step involves appending a string to the variable %content%. The string to be appended includes the module name enclosed in '===' at the start and end, and the content of the item in between.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"This step involves appending a string to the variable %content%. The string to be appended includes the module name enclosed in '===' at the start and end, and the content of the item in between.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "b371e7b744c9c7eaa3a56881e4c825936b167c20e488cf0776cce38e237aaae1",
    "Created": "2023-12-07T11:22:24.5969907Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [var] append to variable %content%,\n    '=== %moduleName% starts ===\n    %item.Content% \n    === %moduleName% starts ===\n    '",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nvoid AppendToVariable(String key, Object value, Char? seperator = \n)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToVariable\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"object\", \"Name\": \"value\", \"Value\": \"=== %moduleName% starts ===\\n%item.Content%\\n=== %moduleName% starts ===\\n\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AppendToVariable\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"object\", \"Name\": \"value\", \"Value\": \"=== %moduleName% starts ===\\n%item.Content%\\n=== %moduleName% starts ===\\n\"}\n]}",
    "hash": "8a50dab1421c81112899477e06e2d22028aa98e7bdf983e5147d25ee4daba75a",
    "Created": "2023-12-07T11:22:32.4054639Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "set chain, matic",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"SetChain\",\n\"StepDescription\": \"This step involves setting the blockchain chain to 'matic'.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"SetChain\",\n\"StepDescription\": \"This step involves setting the blockchain chain to 'matic'.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\"],\n\"WaitForExecution\": true}",
    "hash": "c383c2337815c185d4304252d2a23427702ab3012ed678ce17f598f8b71c3aeb",
    "Created": "2023-12-07T11:22:38.4062786Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BlockchainModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: set chain, matic",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddressOrSymbol, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid StopListening(String subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject NameOfSmartContract(String contractAddressOrSymbol) \nObject TotalSupplyOnSmartContract(String contractAddressOrSymbol) \nObject GetMyBalanceOnSmartContract(String contractAddressOrSymbol) \nObject BalanceOfOnSmartContract(String contractAddressOrSymbol, String addressToCheckBalanceOf) \nObject BalanceOfBatchOnSmartContract(String contractAddressOrSymbol, String[] addresses, BigInteger[] ids) \nObject IsApprovedForAllOnSmartContract(String contractAddressOrSymbol, String accountAddress, String operatorAddress) \nObject CecimalsOnSmartContract(String contractAddressOrSymbol) \nObject AllowanceFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value) \nObject SymbolOnSmartContract(String contractAddressOrSymbol) \nObject SupportsInterfaceOnSmartContract(String contractAddressOrSymbol, String interfaceId) \nObject GetUriOnSmartContract(String contractAddressOrSymbol, BigInteger id) \nObject GetApprovedOnSmartContract(String contractAddressOrSymbol) \nObject ApproveSmartContract(String contractAddressOrSymbol, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject MintSmartContract(String contractAddressOrSymbol, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject BurnSmartContract(String contractAddressOrSymbol, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject TransferSmartContract(String contractAddressOrSymbol, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject TransferFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject SafeTransferFromErc721SmartContract(String contractAddressOrSymbol, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject SafeTransferFromErc1155SmartContract(String contractAddressOrSymbol, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject SafeBatchTransferFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject SetApprovalForAllOnSmartContract(String contractAddressOrSymbol, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddressOrSymbol, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddressOrSymbol, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetCurrentAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1<Decimal>? gasPriceWei, Nullable`1<BigInteger>? gas, Nullable`1<BigInteger>? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1<Decimal>? gasPriceWei, Nullable`1<BigInteger>? gas, Nullable`1<BigInteger>? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\n# RPC servers available #\r\n[{\"IsDefault\":true,\"Name\":\"Mumbai - Polygon testnet\",\"Url\":\"wss://polygon-mumbai-bor.publicnode.com\",\"ChainId\":80001,\"IsTestNet\":true,\"HexChainId\":\"13881\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Matic (Polygon) mainnet\",\"Url\":\"wss://polygon-bor.publicnode.com\",\"ChainId\":137,\"IsTestNet\":false,\"HexChainId\":\"89\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Ethereum mainnet\",\"Url\":\"wss://ethereum.publicnode.com\",\"ChainId\":1,\"IsTestNet\":false,\"HexChainId\":\"1\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Ethereum testnet (Goerli)\",\"Url\":\"wss://ethereum-goerli.publicnode.com\",\"ChainId\":5,\"IsTestNet\":true,\"HexChainId\":\"5\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Binance mainnet\",\"Url\":\"wss://bsc.publicnode.com\",\"ChainId\":56,\"IsTestNet\":false,\"HexChainId\":\"38\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Binance testnet\",\"Url\":\"wss://bsc-testnet.publicnode.com\",\"ChainId\":97,\"IsTestNet\":true,\"HexChainId\":\"61\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Arbitrum One mainnet\",\"Url\":\"wss://arbitrum-one.publicnode.com\",\"ChainId\":42161,\"IsTestNet\":false,\"HexChainId\":\"A4B1\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Arbitrum Goerli testnet\",\"Url\":\"wss://arbitrum-goerli.publicnode.com\",\"ChainId\":421613,\"IsTestNet\":true,\"HexChainId\":\"66EED\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Optimism (OP) mainnet\",\"Url\":\"wss://optimism.publicnode.com\",\"ChainId\":10,\"IsTestNet\":false,\"HexChainId\":\"A\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Optimism (OP) Goerli testnet\",\"Url\":\"wss://optimism-goerli.publicnode.com\",\"ChainId\":420,\"IsTestNet\":true,\"HexChainId\":\"1A4\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Avalanche C-Chain mainnet\",\"Url\":\"wss://avalanche-c-chain.publicnode.com\",\"ChainId\":43114,\"IsTestNet\":false,\"HexChainId\":\"A86A\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Avalanche Fuji testnet\",\"Url\":\"wss://avalanche-fuji-c-chain.publicnode.com\",\"ChainId\":43113,\"IsTestNet\":true,\"HexChainId\":\"A869\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Gnosis mainnet\",\"Url\":\"wss://rpc.gnosischain.com/wss\",\"ChainId\":100,\"IsTestNet\":false,\"HexChainId\":\"64\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Gnosis Chiado Testnet\",\"Url\":\"wss://rpc.chiadochain.net/wss\",\"ChainId\":10200,\"IsTestNet\":true,\"HexChainId\":\"27D8\",\"Setting\":null}]\r\n# RPC servers available #\r\n# wallet addresses #\r\n[{\"IsDefault\":false,\"IsArchived\":false,\"Addresses\":[\"0x7CE326548d825139f69E43F6FaAb24aeaF189d02\",\"0x28781c2d6D84fED582F137CA33C5503F3b0258cc\",\"0x8A5d74D9F957e24Fcde3983B1222fb8410c6F301\",\"0x764398768330410f95f902dFc7E859Ab2CC52B62\",\"0x7fbc4197E7a9a7Cf694A428995d4426368F8BE4b\",\"0x14D9c4d3FC073A880a3D8FC23BdC481CeF752699\",\"0x21491285b15b67834e6011528644d3d05657E959\",\"0x921Fd6e6ad9557416aA19B5E5E454d4677Bb5e57\",\"0x6596f43895014A0f4090487E012C69bB3b841C2f\",\"0x6acC2E405Ad97DcbD86b5ac0512319929495314A\",\"0xdeD9e1B072E74BB40ca98D6341013CcEF13F64e5\",\"0xec2C8bfC2f0461Ca8663Fa753970531DD13e736d\",\"0x488E03942F8e8525f72036A4B5f3387FC310D180\",\"0x83e5B585CB03098523C78edc0bE46F5721829707\",\"0x42e1360602595AE57c99f4eeD2d1fef329fEC799\",\"0xed75DcfcB195a5cE7534f36e7FF7e65F7627a237\",\"0xC364e806FCD759Fbf2d2eb3d363DFE27272C729C\",\"0xBFbea155f030d1D69e4e596Fc918C6982D8E8F59\",\"0xd6F05C9F8e08d510A4DAdE9e9cAF2E5e01AcA89F\",\"0x489D3070Fc46D2A6adb0FFc7304A1956b3C80B42\"],\"Name\":\"First\",\"Seed\":\"\",\"PrivateKey\":\"\"}]\r\n# wallet addresses #",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"SetCurrentRpcServer\", \"Parameters\": [{\"Type\": \"string\", \"Name\": \"nameOrUrl\", \"Value\": \"Matic (Polygon) mainnet\"}]}"
    },
    "answer": "{\"FunctionName\": \"SetCurrentRpcServer\", \"Parameters\": [{\"Type\": \"string\", \"Name\": \"nameOrUrl\", \"Value\": \"Matic (Polygon) mainnet\"}]}",
    "hash": "f297c9735e19985258c7d126b4451264d96622505cdf50c1ff0dc80d412e3b4a",
    "Created": "2023-12-07T11:22:42.7400099Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "listen to usdc, Transfer event , call !Transfer\n    if exception is 500, call !WriteOutSetupMessage",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"ListenToUsdcTransferEvent\",\n\"StepDescription\": \"The step involves listening to the 'Transfer' event of USDC. If this event occurs, the function '!Transfer' is called. If an exception with the error code '500' occurs, the function '!WriteOutSetupMessage' is called.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false,\n\"OnExceptionContainingTextCallGoal\": { \"key\": \"500\", \"value\": \"!WriteOutSetupMessage\" }}}"
    },
    "answer": "{\"StepName\": \"ListenToUsdcTransferEvent\",\n\"StepDescription\": \"The step involves listening to the 'Transfer' event of USDC. If this event occurs, the function '!Transfer' is called. If an exception with the error code '500' occurs, the function '!WriteOutSetupMessage' is called.\",\n\"Modules\": [\"PLang.Modules.BlockchainModule\", \"PLang.Modules.CallGoalModule\"],\n\"WaitForExecution\": true,\n\"ErrorHandler\": {\"IgnoreErrors\": false,\n\"OnExceptionContainingTextCallGoal\": { \"key\": \"500\", \"value\": \"!WriteOutSetupMessage\" }}}",
    "hash": "0fdc58c42959e422f7bde0603497be50fe9907608259e5535be423a81141f0cc",
    "Created": "2023-12-07T11:22:54.25292Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[var] append to variable %content%,\n    '=== %moduleName% starts ===\n    %item.Content% \n    === %moduleName% ends ===\n    '",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LocalOrGlobalVariableModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"Append the string '=== %moduleName% starts === %item.Content% === %moduleName% ends ===' to the variable %content%\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"Append the string '=== %moduleName% starts === %item.Content% === %moduleName% ends ===' to the variable %content%\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "5fed8a2be9d53bcd4d4353b0d84b1363a2fc06eb744dd61ff2712cda29a43428",
    "Created": "2023-12-07T11:23:33.4567001Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [var] append to variable %content%,\n    '=== %moduleName% starts ===\n    %item.Content% \n    === %moduleName% ends ===\n    '",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nvoid AppendToVariable(String key, Object value, Char? seperator = \n)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToVariable\", \n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"string\", \"Name\": \"value\", \"Value\": \"=== %moduleName% starts ===\\n%item.Content%\\n=== %moduleName% ends ===\\n\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AppendToVariable\", \n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"string\", \"Name\": \"value\", \"Value\": \"=== %moduleName% starts ===\\n%item.Content%\\n=== %moduleName% ends ===\\n\"}\n]}",
    "hash": "f233bf59fd04ac080d56ba0c2d4817c0e10542bdaa86aca26393c8a448291c74",
    "Created": "2023-12-07T11:23:38.5793984Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] get folder name that files is in from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetFolderName\",\n\"StepDescription\": \"Extract the folder name from the absolute path of the file specified in %item.Path% and write the result to %moduleName%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetFolderName\",\n\"StepDescription\": \"Extract the folder name from the absolute path of the file specified in %item.Path% and write the result to %moduleName%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "e242eb5a829a9e7187127e3b232bf09a5d88d899e1b9b633a146322ea5d2535b",
    "Created": "2023-12-07T11:24:59.6666214Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get folder name that files is in from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "\nName cannot be: 01. GetFileNameWithoutExtension\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = System.IO.Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFolderNameFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = System.IO.Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFolderNameFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "3ff8f0993612c956dcfc734ddd45cbe40c9908e2ba8b838b441128a1d30243dd",
    "Created": "2023-12-07T11:25:15.5447307Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get folder name that files is in from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "\nName cannot be: 01. GetFileNameWithoutExtension, 01. GetFolderName\n== Code generated by ChatGPT in previous request, start ==\nusing System.IO;\r\n\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = PLang.SafeFileSystem.Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(9,26): error CS0103: The name 'PLang' does not exist in the current context\n(13,23): error CS0246: The type or namespace name 'Exception' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFolderNameFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFolderNameFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "eacb31091a3684d0a530200e4a7a07b5097aee07f319a674a1638250b2085b2d",
    "Created": "2023-12-07T11:25:30.9338244Z"
  },
  {
    "question": {
      "type": "PLang.Modules.BlockchainModule.Builder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: listen to usdc, Transfer event , call !Transfer\n    if exception is 500, call !WriteOutSetupMessage",
      "assistant": "## functions available defined in csharp ##\r\nvoid ListenToApprovalEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToApprovalForAllEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferBatchEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToUriEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferSingleEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToTransferEventOnSmartContract(String contractAddressOrSymbol, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid ListenToEventOnSmartContract(String contractAddressOrSymbol, String abi, String goalToCall, String? subscriptIdVariableName = subscriptionId) \nvoid StopListening(String subscriptionId) \nvoid ListenToBlock(String callGoal, String? subcriptionId = subscriptionId, String? callGoalOnUnsubscribe) \nObject NameOfSmartContract(String contractAddressOrSymbol) \nObject TotalSupplyOnSmartContract(String contractAddressOrSymbol) \nObject GetMyBalanceOnSmartContract(String contractAddressOrSymbol) \nObject BalanceOfOnSmartContract(String contractAddressOrSymbol, String addressToCheckBalanceOf) \nObject BalanceOfBatchOnSmartContract(String contractAddressOrSymbol, String[] addresses, BigInteger[] ids) \nObject IsApprovedForAllOnSmartContract(String contractAddressOrSymbol, String accountAddress, String operatorAddress) \nObject CecimalsOnSmartContract(String contractAddressOrSymbol) \nObject AllowanceFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value) \nObject SymbolOnSmartContract(String contractAddressOrSymbol) \nObject SupportsInterfaceOnSmartContract(String contractAddressOrSymbol, String interfaceId) \nObject GetUriOnSmartContract(String contractAddressOrSymbol, BigInteger id) \nObject GetApprovedOnSmartContract(String contractAddressOrSymbol) \nObject ApproveSmartContract(String contractAddressOrSymbol, String spender, BigInteger value, Boolean? waitForReceipt = False) \nObject MintSmartContract(String contractAddressOrSymbol, String to, BigInteger amount, Boolean? waitForReceipt = False) \nObject BurnSmartContract(String contractAddressOrSymbol, String account, BigInteger amount, Boolean? waitForReceipt = False) \nObject TransferSmartContract(String contractAddressOrSymbol, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject TransferFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject SafeTransferFromErc721SmartContract(String contractAddressOrSymbol, String from, String to, BigInteger id, Boolean? waitForReceipt = False) \nObject SafeTransferFromErc1155SmartContract(String contractAddressOrSymbol, String from, String to, BigInteger[] ids, BigInteger[] amounts, Boolean? waitForReceipt = False) \nObject SafeBatchTransferFromSmartContract(String contractAddressOrSymbol, String from, String to, BigInteger value, Boolean? waitForReceipt = False) \nObject SetApprovalForAllOnSmartContract(String contractAddressOrSymbol, String operatorAddress, Boolean approved, Boolean? waitForReceipt = False) \nObject CallFunction(String contractAddressOrSymbol, String abi, Object[]? functionInputs) \nObject CallAndSignFunction(String contractAddressOrSymbol, String abi, Object[]? functionInputs, Boolean? waitForReceipt = False)  // Generate abi from functionName and functionInputs if not provided by user.. \nList`1 GetRpcServers() \nvoid SetCurrentRpcServer(String nameOrUrl) \nRpcServer GetCurrentRpcServer() \nList`1 GetWallets() \nvoid SetCurrentWallet(String walletName) \nWallet GetOrCreateWallet() \nvoid SetCurrentAddress(String address) \nString GetCurrentAddress() \nString SignMessage(String message) \nBoolean VerifySignature(String message, String signature, String expectedAddress) \nBigInteger GetBalanceInWei(String address) \nDecimal GetBalanceToDecimalPoint(String address, Int32? decimalPlacesToUnit = 18)  // Get the balance in ETH, converts from Wei to Eth. \nUInt32 GetDecimal(String contractAddress) \nString Transfer(String to, Decimal etherAmount, Nullable`1<Decimal>? gasPriceWei, Nullable`1<BigInteger>? gas, Nullable`1<BigInteger>? nonce) \nTransactionReceipt TransferWaitForReceipt(String to, Decimal etherAmount, Nullable`1<Decimal>? gasPriceWei, Nullable`1<BigInteger>? gas, Nullable`1<BigInteger>? nonce) \nString SendTransaction(String contractAddress, String abi, Object[] args) \nTransactionReceipt SendTransactionAndWaitForReceipt(String contractAddress, String abi, Object[] args) \n\r\n## functions available ends ##\n# RPC servers available #\r\n[{\"IsDefault\":true,\"Name\":\"Mumbai - Polygon testnet\",\"Url\":\"wss://polygon-mumbai-bor.publicnode.com\",\"ChainId\":80001,\"IsTestNet\":true,\"HexChainId\":\"13881\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Matic (Polygon) mainnet\",\"Url\":\"wss://polygon-bor.publicnode.com\",\"ChainId\":137,\"IsTestNet\":false,\"HexChainId\":\"89\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Ethereum mainnet\",\"Url\":\"wss://ethereum.publicnode.com\",\"ChainId\":1,\"IsTestNet\":false,\"HexChainId\":\"1\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Ethereum testnet (Goerli)\",\"Url\":\"wss://ethereum-goerli.publicnode.com\",\"ChainId\":5,\"IsTestNet\":true,\"HexChainId\":\"5\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Binance mainnet\",\"Url\":\"wss://bsc.publicnode.com\",\"ChainId\":56,\"IsTestNet\":false,\"HexChainId\":\"38\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Binance testnet\",\"Url\":\"wss://bsc-testnet.publicnode.com\",\"ChainId\":97,\"IsTestNet\":true,\"HexChainId\":\"61\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Arbitrum One mainnet\",\"Url\":\"wss://arbitrum-one.publicnode.com\",\"ChainId\":42161,\"IsTestNet\":false,\"HexChainId\":\"A4B1\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Arbitrum Goerli testnet\",\"Url\":\"wss://arbitrum-goerli.publicnode.com\",\"ChainId\":421613,\"IsTestNet\":true,\"HexChainId\":\"66EED\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Optimism (OP) mainnet\",\"Url\":\"wss://optimism.publicnode.com\",\"ChainId\":10,\"IsTestNet\":false,\"HexChainId\":\"A\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Optimism (OP) Goerli testnet\",\"Url\":\"wss://optimism-goerli.publicnode.com\",\"ChainId\":420,\"IsTestNet\":true,\"HexChainId\":\"1A4\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Avalanche C-Chain mainnet\",\"Url\":\"wss://avalanche-c-chain.publicnode.com\",\"ChainId\":43114,\"IsTestNet\":false,\"HexChainId\":\"A86A\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Avalanche Fuji testnet\",\"Url\":\"wss://avalanche-fuji-c-chain.publicnode.com\",\"ChainId\":43113,\"IsTestNet\":true,\"HexChainId\":\"A869\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Gnosis mainnet\",\"Url\":\"wss://rpc.gnosischain.com/wss\",\"ChainId\":100,\"IsTestNet\":false,\"HexChainId\":\"64\",\"Setting\":null},{\"IsDefault\":false,\"Name\":\"Gnosis Chiado Testnet\",\"Url\":\"wss://rpc.chiadochain.net/wss\",\"ChainId\":10200,\"IsTestNet\":true,\"HexChainId\":\"27D8\",\"Setting\":null}]\r\n# RPC servers available #\r\n# wallet addresses #\r\n[{\"IsDefault\":false,\"IsArchived\":false,\"Addresses\":[\"0x7CE326548d825139f69E43F6FaAb24aeaF189d02\",\"0x28781c2d6D84fED582F137CA33C5503F3b0258cc\",\"0x8A5d74D9F957e24Fcde3983B1222fb8410c6F301\",\"0x764398768330410f95f902dFc7E859Ab2CC52B62\",\"0x7fbc4197E7a9a7Cf694A428995d4426368F8BE4b\",\"0x14D9c4d3FC073A880a3D8FC23BdC481CeF752699\",\"0x21491285b15b67834e6011528644d3d05657E959\",\"0x921Fd6e6ad9557416aA19B5E5E454d4677Bb5e57\",\"0x6596f43895014A0f4090487E012C69bB3b841C2f\",\"0x6acC2E405Ad97DcbD86b5ac0512319929495314A\",\"0xdeD9e1B072E74BB40ca98D6341013CcEF13F64e5\",\"0xec2C8bfC2f0461Ca8663Fa753970531DD13e736d\",\"0x488E03942F8e8525f72036A4B5f3387FC310D180\",\"0x83e5B585CB03098523C78edc0bE46F5721829707\",\"0x42e1360602595AE57c99f4eeD2d1fef329fEC799\",\"0xed75DcfcB195a5cE7534f36e7FF7e65F7627a237\",\"0xC364e806FCD759Fbf2d2eb3d363DFE27272C729C\",\"0xBFbea155f030d1D69e4e596Fc918C6982D8E8F59\",\"0xd6F05C9F8e08d510A4DAdE9e9cAF2E5e01AcA89F\",\"0x489D3070Fc46D2A6adb0FFc7304A1956b3C80B42\"],\"Name\":\"First\",\"Seed\":\"\",\"PrivateKey\":\"\"}]\r\n# wallet addresses #",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ListenToTransferEventOnSmartContract\", \n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddressOrSymbol\", \"Value\": \"usdc\"}, \n    {\"Type\": \"String\", \"Name\": \"goalToCall\", \"Value\": \"!Transfer\"}, \n    {\"Type\": \"String\", \"Name\": \"subscriptIdVariableName\", \"Value\": \"subscriptionId\"}], \n\"OnExceptionContainingTextCallGoal\": {\"Text\": \"500\", \"Goal\": \"!WriteOutSetupMessage\"}}"
    },
    "answer": "{\"FunctionName\": \"ListenToTransferEventOnSmartContract\", \n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"contractAddressOrSymbol\", \"Value\": \"usdc\"}, \n    {\"Type\": \"String\", \"Name\": \"goalToCall\", \"Value\": \"!Transfer\"}, \n    {\"Type\": \"String\", \"Name\": \"subscriptIdVariableName\", \"Value\": \"subscriptionId\"}], \n\"OnExceptionContainingTextCallGoal\": {\"Text\": \"500\", \"Goal\": \"!WriteOutSetupMessage\"}}",
    "hash": "b39f1872709f02c78f4da92771b47439c6cd885c14448ce3300084f4d07cee61",
    "Created": "2023-12-07T11:25:46.0996746Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out \"from: %from% | to:%to% | value:%value%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"OutputValues\",\n\"StepDescription\": \"Write out the values of the variables 'from', 'to', and 'value' in the format 'from: %from% | to:%to% | value:%value%'.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"OutputValues\",\n\"StepDescription\": \"Write out the values of the variables 'from', 'to', and 'value' in the format 'from: %from% | to:%to% | value:%value%'.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "6e956a62ab0c5c85051729046b4f6aa5e887ab5d70c92a2188779233e994dbab",
    "Created": "2023-12-07T11:25:55.6526915Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out \"from: %from% | to:%to% | value:%value%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"from: %from% | to:%to% | value:%value%\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"from: %from% | to:%to% | value:%value%\"}]}",
    "hash": "34e3039fd4cb308caed30166bbba9441a927ff7295be63f6dcef4729ba37daaf",
    "Created": "2023-12-07T11:26:39.5026252Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "get content of all '.goal' files, write to %files%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetGoalFilesContent\",\n\"StepDescription\": \"This step involves accessing the file system to find all files with the '.goal' extension, reading their content, and storing this content in the %files% variable.\",\n\"Modules\": [\"PLang.Modules.FileModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetGoalFilesContent\",\n\"StepDescription\": \"This step involves accessing the file system to find all files with the '.goal' extension, reading their content, and storing this content in the %files% variable.\",\n\"Modules\": [\"PLang.Modules.FileModule\", \"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "5dd1148603725a92170b9f24a686b1b80f88020af9d2f5fa9c43adb8989418ba",
    "Created": "2023-12-07T11:27:40.2444389Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: get content of all '.goal' files, write to %files%",
      "assistant": "## functions available defined in csharp ##\r\nBoolean RequestAccessToPath(String path) \nString ReadBinaryFileAndConvertToBase64(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nString ReadTextFile(String path, String? returnValueIfFileNotExisting, Boolean? throwErrorOnNotFound = False) \nStream ReadFileAsStream(String path, Boolean? throwErrorOnNotFound = False) \nvoid ReadExcelFile(String path, Boolean? useHeaderRow = True, Dictionary`2<String>? sheetsToVariable)  // sheetsToVariable is name of sheet that should load into variable. Sheet1=%products% will load Sheet1 into %product% variable, Sheet2-A1:H53=%categories%, will load data from A1:H53 into %categories%. \nvoid WriteExcelFile(String path, Object variableToWriteToExcel, String? sheetName = Sheet1, Boolean? printHeader = True, Boolean? overwrite = False) \nvoid WriteCsvFile(String path, Object variableToWriteToCsv, Boolean? append = False, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nObject ReadCsvFile(String path, Boolean? hasHeaderRecord = True, String? delimiter = ,, String? newLine = \n, String? encoding = utf-8, Boolean? ignoreBlankLines = True, Boolean? allowComments = False, Char? comment = #, String? goalToCallOnBadData) \nvoid SaveMultipleFiles(List`1<FileInfo> files) \nList`1 ReadMultipleTextFiles(String folderPath, String searchPattern, Boolean? includeAllSubfolders = False) \nvoid WriteToFile(String path, String content, Boolean? overwrite = False) \nvoid AppendToFile(String path, String content, String? seperator) \nvoid CopyFiles(String directoryPath, String destinationPath, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False, Boolean? overwriteFiles = False) \nvoid CopyFile(String sourceFileName, String destFileName, Boolean? createDirectoryIfNotExisting = False, Boolean? overwriteFile = False) \nvoid DeleteFile(String fileName, Boolean? throwErrorOnNotFound = False) \nIFileInfo GetFileInfo(String fileName) \nvoid CreateDirectory(String directoryPath) \nvoid DeleteDirectory(String directoryPath, Boolean? recursive = True, Boolean? throwErrorOnNotFound = False) \nString[] GetFilePathsInDirectory(String? directoryPath = ./, String? searchPattern = *, String[]? excludePatterns, Boolean? includeSubfolders = False) \nBoolean DirectoryExists(String directoryPath) \nBoolean FileExists(String directoryPath) \nvoid ListenToFileChange(String[] fileSearchPatterns, String goalToCall, String[]? excludeFiles, Boolean? includeSubdirectories = False) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"ReadMultipleTextFiles\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"folderPath\", \"Value\": \"./\"},\n    {\"Type\": \"String\", \"Name\": \"searchPattern\", \"Value\": \"*.goal\"},\n    {\"Type\": \"Boolean\", \"Name\": \"includeAllSubfolders\", \"Value\": true}\n],\n\"ReturnValue\": {\"Type\": \"List`1\", \"VariableName\": \"files\"}}"
    },
    "answer": "{\"FunctionName\": \"ReadMultipleTextFiles\",\n\"Parameters\": [\n    {\"Type\": \"String\", \"Name\": \"folderPath\", \"Value\": \"./\"},\n    {\"Type\": \"String\", \"Name\": \"searchPattern\", \"Value\": \"*.goal\"},\n    {\"Type\": \"Boolean\", \"Name\": \"includeAllSubfolders\", \"Value\": true}\n],\n\"ReturnValue\": {\"Type\": \"List`1\", \"VariableName\": \"files\"}}",
    "hash": "cc8804521bd1a3c2bbe88c349e4692945579ab7c0c335a94ad8c4684a91b2e1c",
    "Created": "2023-12-07T11:27:45.1615865Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get folder name that files is in from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = System.IO.Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFolderNameFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = System.IO.Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFolderNameFromAbsolutePath\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "a47058a7adf036c75aa3a765f32fcf64262b348fbec061858b9a76f4f065665d",
    "Created": "2023-12-07T11:27:58.8706526Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get folder name that files is in from abosolute path %item.Path%, write to %moduleName%",
      "assistant": "\nName cannot be: 01. GetFolderName\n== Code generated by ChatGPT in previous request, start ==\nusing System.IO;\r\n\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = PLang.SafeFileSystem.Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(9,26): error CS0103: The name 'PLang' does not exist in the current context\n(13,23): error CS0246: The type or namespace name 'Exception' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFolderNameFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\nusing System;\nusing System.IO;\n\npublic static class GetFolderNameFromAbsolutePath\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            moduleName = Path.GetDirectoryName(itemαPath);\n        }\n        catch\n        {\n            throw new Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetFolderNameFromAbsolutePath\",\n  \"Using\": [\"System\", \"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "0eab6d7e4b8e55ea31a8472c62fdfc90d56d404f22f4208d86580392ef20e38b",
    "Created": "2023-12-07T11:28:15.7959013Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[var] append to variable %content%,\n    '=== %moduleName% starts === \n    %item.Content% \n    === %moduleName% ends ===\n    '",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LocalOrGlobalVariableModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"This step involves appending a string to the variable %content%. The string to be appended includes the module name and its content, enclosed within start and end markers.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"AppendToVariable\",\n\"StepDescription\": \"This step involves appending a string to the variable %content%. The string to be appended includes the module name and its content, enclosed within start and end markers.\",\n\"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n\"WaitForExecution\": true}",
    "hash": "7643c04a173fd4f909a8dd9572d95101d1c86acbd9ffef093dde982ce694b788",
    "Created": "2023-12-07T11:28:23.3889429Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: [var] append to variable %content%,\n    '=== %moduleName% starts === \n    %item.Content% \n    === %moduleName% ends ===\n    '",
      "assistant": "## functions available defined in csharp ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String value)  // Set string local variable.. \nvoid SetVariable(String key, Object value)  // Set local variable.. \nvoid AppendToVariable(String key, Object value, Char? seperator = \n)  // Set local variable.. \nObject GetVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveVariable(String key) \nvoid RemoveStaticVariable(String key) \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"AppendToVariable\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"object\", \"Name\": \"value\", \"Value\": \"=== %moduleName% starts === \\n%item.Content% \\n=== %moduleName% ends ===\\n\"}\n]}"
    },
    "answer": "{\"FunctionName\": \"AppendToVariable\",\n\"Parameters\": [\n    {\"Type\": \"string\", \"Name\": \"key\", \"Value\": \"%content%\"},\n    {\"Type\": \"object\", \"Name\": \"value\", \"Value\": \"=== %moduleName% starts === \\n%item.Content% \\n=== %moduleName% ends ===\\n\"}\n]}",
    "hash": "ca0306d90378b6b7e8f9e8e7c57332e7b1adf35a2aee4e81db16485b4182892d",
    "Created": "2023-12-07T11:28:31.7573504Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "[code] get folder name that files is in from abosolute path %item.Path%, do not show full path, only name of folder at top level, write to %moduleName%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.CodeModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"GetTopLevelFolderName\",\n\"StepDescription\": \"Extract the top-level folder name from the absolute path stored in the variable %item.Path% and write the folder name to the variable %moduleName%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"GetTopLevelFolderName\",\n\"StepDescription\": \"Extract the top-level folder name from the absolute path stored in the variable %item.Path% and write the folder name to the variable %moduleName%\",\n\"Modules\": [\"PLang.Modules.CodeModule\"],\n\"WaitForExecution\": true}",
    "hash": "cb76a800ab9202793f49c42d85fbbd55ed984c485d5d4d7dc5331fbdb2c55079",
    "Created": "2023-12-07T11:29:52.6150008Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get folder name that files is in from abosolute path %item.Path%, do not show full path, only name of folder at top level, write to %moduleName%",
      "assistant": "\nName cannot be: 01. GetFolderName\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\npublic static class GetFolderName\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            var directoryInfo = new System.IO.DirectoryInfo(itemαPath);\n            moduleName = directoryInfo.Name;\n        }\n        catch\n        {\n            throw new System.Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFolderName\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\npublic static class GetFolderName\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            var directoryInfo = new System.IO.DirectoryInfo(itemαPath);\n            moduleName = directoryInfo.Name;\n        }\n        catch\n        {\n            throw new System.Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n    \"Name\": \"GetFolderName\",\n    \"Using\": [\"System.IO\"],\n    \"Assemblies\": null,\n    \"GoalToCallOnTrue\": null,\n    \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "9939a73f281e947afac903c6a1142103b3d47543fd78b84647d42dc62907555b",
    "Created": "2023-12-07T11:30:06.1276282Z"
  },
  {
    "question": {
      "type": "PLang.Modules.CodeModule.Builder",
      "system": "Act as a senior c# developer, that converts the user statement into a c#(Ver. 9) code. \r\n\r\nA variable is defined by starting and ending %.\r\nGenerate static class. The class generated should have 1 method with the static method named Process and return void. \r\nVariables defined in the user statement can be passed into the Process function by value, but only if defined in statement. \r\n\r\nThe code will not be modified after it's generated.\r\nIf condition fails, throw Exception, unless defined otherwise by user command\r\nException message should be for non-technical user\r\n\r\nName: is CamelCase name of class\r\nAssemblies: dll to reference to compile using Roslyn\r\nVariables that user expect to be written to should be provided with out, parameter in the function.\r\nReplace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsαtitle\r\nString are defined with double quote (\")\r\nDo not reference any dto classes. Use dynamic.\r\nYou must return ```csharp for the code implementation and ```json scheme \r\n{Name:string, Using:string[]?= null,  Assemblies:string[]? = null,  GoalToCallOnTrue:string? = null, string? GoalToCallOnFalse:string? = null}\r\n\r\nBe Concise\n\nOnly write the raw c# code and json scheme, no summary, no extra text to explain, be concise",
      "question": "command: [code] get folder name that files is in from abosolute path %item.Path%, do not show full path, only name of folder at top level, write to %moduleName%",
      "assistant": "\nName cannot be: 01. GetFolderName, 01. GetTopLevelFolderName\n== Code generated by ChatGPT in previous request, start ==\nusing System.IO;\r\n\npublic static class GetFolderName\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            var directoryInfo = new PLang.SafeFileSystem.DirectoryInfo(itemαPath);\n            moduleName = directoryInfo.Name;\n        }\n        catch\n        {\n            throw new System.Exception(\"Unable to get the folder name from the provided path.\");\n        }\n    }\n}\n\n== Code generated ends ==\nBut it had errors:\n(9,37): error CS0246: The type or namespace name 'PLang' could not be found (are you missing a using directive or an assembly reference?)\n\nFix the error and generate the C# code again.",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "```csharp\nusing System.IO;\n\npublic static class GetTopLevelFolderName\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            var directoryInfo = new DirectoryInfo(Path.GetDirectoryName(itemαPath));\n            moduleName = directoryInfo.Name;\n        }\n        catch\n        {\n            throw new System.Exception(\"Unable to get the top level folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetTopLevelFolderName\",\n  \"Using\": [\"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```"
    },
    "answer": "```csharp\nusing System.IO;\n\npublic static class GetTopLevelFolderName\n{\n    public static void Process(string itemαPath, out string moduleName)\n    {\n        try\n        {\n            var directoryInfo = new DirectoryInfo(Path.GetDirectoryName(itemαPath));\n            moduleName = directoryInfo.Name;\n        }\n        catch\n        {\n            throw new System.Exception(\"Unable to get the top level folder name from the provided path.\");\n        }\n    }\n}\n```\n\n```json\n{\n  \"Name\": \"GetTopLevelFolderName\",\n  \"Using\": [\"System.IO\"],\n  \"Assemblies\": null,\n  \"GoalToCallOnTrue\": null,\n  \"GoalToCallOnFalse\": null\n}\n```",
    "hash": "1af0283cc35c36c47630c51c1c9b728b39ad6731dc41e3b29ca91db32c00a38b",
    "Created": "2023-12-07T11:30:22.0488759Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "write out %__TxLog__.ToJson()%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"WriteOutTxLog\",\n\"StepDescription\": \"This step involves writing out the value of the '__TxLog__' variable in a JSON format.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"WriteOutTxLog\",\n\"StepDescription\": \"This step involves writing out the value of the '__TxLog__' variable in a JSON format.\",\n\"Modules\": [\"PLang.Modules.OutputModule\"],\n\"WaitForExecution\": true}",
    "hash": "c8e920d51e9ff72963cabe8ecaca0d4641e9b51a7fbd25aedf4f194316165e5b",
    "Created": "2023-12-07T11:30:27.9055042Z"
  },
  {
    "question": {
      "type": "PLang.Modules.GenericFunctionBuilder",
      "system": "Parse user command.\r\n\r\nSelect the correct function from list of available functions based on user command\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")%\r\nwhere the settingName would be the api key, config key, \r\ndefaultValue for settings is the usual value given, make it \"\" if no value can be default\r\nExplain is an explanation about the setting that novice user can understand.\r\n\r\nOnExceptionContainingTextCallGoal - if no text is defined, set as \"*\", goal to call is required from user\r\n\r\nJSON scheme information\r\nType: the object type in c#\r\nName: name of the variable\r\nValue: %variable% or hardcode string that should be used\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nReturnValue: Only if the function returns a value, else null\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: {\"Type\": string,\n\"VariableName\": string}}",
      "question": "command: write out %__TxLog__.ToJson()%",
      "assistant": "## functions available defined in csharp ##\r\nString Ask(String text, String? type = text)  // Send response to user and waits for answer. type can be text|warning|error|info|debug|trace. \nvoid Write(Object? content, Boolean? writeToBuffer = False, String? type = text)  // Write to the output. type can be text|warning|error|info|debug|trace. \n\r\n## functions available ends ##",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"%__TxLog__.ToJson()%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"writeToBuffer\",\n\"Value\": false},\n{\"Type\": \"string\",\n\"Name\": \"type\",\n\"Value\": \"text\"}]}"
    },
    "answer": "{\"FunctionName\": \"Write\",\n\"Parameters\": [{\"Type\": \"string\",\n\"Name\": \"content\",\n\"Value\": \"%__TxLog__.ToJson()%\"},\n{\"Type\": \"Boolean\",\n\"Name\": \"writeToBuffer\",\n\"Value\": false},\n{\"Type\": \"string\",\n\"Name\": \"type\",\n\"Value\": \"text\"}]}",
    "hash": "482afdf6e8ae63b13da71546b29797d6ab357d2cd4d0887062777e59f53806d6",
    "Created": "2023-12-07T11:30:35.6966975Z"
  },
  {
    "question": {
      "type": "StepBuilder",
      "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement. You MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nExternalServiceHandler : !GoalName? / http://example.org/api/run.goal | file.txt | https://docs.api.is/doc.html .startCssSelector .endCssSelect\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"?: { \"key\": String, \"value\": String }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
      "question": "stop listening %subscriptionId%",
      "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.SeleniumModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
      "model": "gpt-4",
      "caching": true,
      "Reload": false,
      "PreviousResult": null,
      "RawResponse": "{\"StepName\": \"StopListening\",\n\"StepDescription\": \"This step involves stopping the listening process associated with the given subscription ID.\",\n\"Modules\": [\"PLang.Modules.MessageModule\"],\n\"WaitForExecution\": true}"
    },
    "answer": "{\"StepName\": \"StopListening\",\n\"StepDescription\": \"This step involves stopping the listening process associated with the given subscription ID.\",\n\"Modules\": [\"PLang.Modules.MessageModule\"],\n\"WaitForExecution\": true}",
    "hash": "3a2bac5b0d288cb66dc8041200e20eda46e9b574f395b2b2b9d3539ee1874546",
    "Created": "2023-12-07T11:30:39.1680828Z"
  }
]