{
  "Action": {
    "FunctionName": "VerifyHashedValues",
    "Parameters": [
      {
        "Type": "String",
        "Name": "text",
        "Value": "MySuperPassword123."
      },
      {
        "Type": "String",
        "Name": "hash",
        "Value": "%hashedPassword%"
      },
      {
        "Type": "String",
        "Name": "hashAlgorithm",
        "Value": "keccak256"
      },
      {
        "Type": "Boolean",
        "Name": "useSalt",
        "Value": true
      },
      {
        "Type": "String",
        "Name": "salt",
        "Value": ""
      }
    ],
    "ReturnValue": [
      {
        "Type": "Boolean",
        "VariableName": "isValid"
      }
    ]
  },
  "Text": "validate  hashed password, 'MySuperPassword123.' to %hashedPassword%, write to %isValid%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}",
    "type": "PLang.Modules.CryptographicModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\nVariables MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue: Only if the function returns a value AND if user defines %variable% to write into. If no %variable% is defined then set as null."
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nString Encrypt(Object content) \nObject Decrypt(String content) \nString ConvertToBase64(String content) \nByte[] ConvertFromBase64(String base64) \nString CreateSalt(Int32? workFactor = 12) \nString HashHmacShaInput(String input, String? secretKey, Int32? hashSize = 256)  // Hmac hash sizes are 256, 384, 512. \nString HashInput(String input, Boolean? useSalt = True, String? salt, String? hashAlgorithm = \"keccak256\")  // Used for hashing. hashAlgorithm: keccak256 | sha256 | bcrypt. \nString HashIdentityString(String identity)  // Hashes Identity string to standard hash. \nBoolean VerifyHashedValues(String text, String hash, String? hashAlgorithm = \"keccak256\", Boolean? useSalt = True, String? salt)  // Used to verify hash. hashAlgorithm: keccak256 | sha256 | bcrypt. \nvoid SetCurrentBearerToken(String name) \nString GetBearerSecret() \nBoolean ValidateBearerToken(String token, String? issuer = \"PLangRuntime\", String? audience = \"user\") \nString GenerateBearerToken(String uniqueString, String? issuer = \"PLangRuntime\", String? audience = \"user\", Int32? expireTimeInSeconds = 604800)\r\n## functions available ends ##\r\n## defined variables ##\r\nhashedPassword (type:String), isValid (type:object), \r\n## defined variables ##"
          },
          {
            "type": "text",
            "text": "Bearer token names are: Default"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "validate  hashed password, 'MySuperPassword123.' to %hashedPassword%, write to %isValid%"
          }
        ]
      }
    ],
    "model": "gpt-4",
    "caching": true,
    "RawResponse": "{\r\n  \"FunctionName\": \"VerifyHashedValues\",\r\n  \"Parameters\": [\r\n    {\r\n      \"Type\": \"String\",\r\n      \"Name\": \"text\",\r\n      \"Value\": \"MySuperPassword123.\"\r\n    },\r\n    {\r\n      \"Type\": \"String\",\r\n      \"Name\": \"hash\",\r\n      \"Value\": \"%hashedPassword%\"\r\n    },\r\n    {\r\n      \"Type\": \"String\",\r\n      \"Name\": \"hashAlgorithm\",\r\n      \"Value\": \"keccak256\"\r\n    },\r\n    {\r\n      \"Type\": \"Boolean\",\r\n      \"Name\": \"useSalt\",\r\n      \"Value\": true\r\n    },\r\n    {\r\n      \"Type\": \"String\",\r\n      \"Name\": \"salt\",\r\n      \"Value\": \"\"\r\n    }\r\n  ],\r\n  \"ReturnValue\": [\r\n    {\r\n      \"Type\": \"Boolean\",\r\n      \"VariableName\": \"isValid\"\r\n    }\r\n  ]\r\n}"
  },
  "RunOnBuild": false
}