{
  "Action": {
    "FunctionName": "RunPythonScript",
    "Parameters": [
      {
        "Type": "String",
        "Name": "fileName",
        "Value": "main.py"
      },
      {
        "Type": "String[]",
        "Name": "parameterValues",
        "Value": [
          "%number1%",
          "%number2%"
        ]
      },
      {
        "Type": "String[]",
        "Name": "variablesToExtractFromPythonScript",
        "Value": [
          "result"
        ]
      }
    ],
    "ReturnValue": [
      {
        "Type": "object",
        "VariableName": "result"
      }
    ]
  },
  "Text": "call main.py, %number1%, %number2%, write to %result%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}",
    "type": "PLang.Modules.GenericFunctionBuilder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\nVariables MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue: Only if the function returns a value AND if user defines %variable% to write into. If no %variable% is defined then set as null.",
            "image_url": null
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}",
            "image_url": null
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nDictionary`2 RunPythonScript(String? fileName = \"main.py\", String[]? parameterValues, String[]? parameterNames, String[]? variablesToExtractFromPythonScript, Boolean? useNamedArguments = False, String? pythonPath, String? stdOutVariableName, String? stdErrorVariableName)  // Run a python script. parameterNames should be equal length as parameterValues. Parameter example name=%name%. variablesToExtractFromPythonScript are keys in the format [a-zA-Z0-9_\\.]+ that the user want to write to.\r\n## functions available ends ##\r\n## defined variables ##\r\nnumber1 (type:object), number2 (type:object), result (type:object), \r\n## defined variables ##",
            "image_url": null
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "call main.py, %number1%, %number2%, write to %result%",
            "image_url": null
          }
        ]
      }
    ],
    "model": "gpt-4",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}