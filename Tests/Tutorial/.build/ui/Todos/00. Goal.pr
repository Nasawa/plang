{
  "GoalName": "Todos",
  "Comment": null,
  "GoalSteps": [
    {
      "Text": "select * from todos, where not completed, newest first, write to %todos%",
      "Comment": null,
      "ModuleType": "PLang.Modules.DbModule",
      "Name": "FetchIncompleteTodos",
      "Description": "Select all records from the 'todos' table where the task is not completed. Order the results by the newest first and write the result to the 'todos' variable.",
      "PrFileName": "01. FetchIncompleteTodos.pr",
      "RelativePrPath": ".build\\ui\\Todos\\01. FetchIncompleteTodos.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2024-01-15T17:54:31.7734108+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LineNumber": 1,
      "LlmQuestion": {
        "temperature": null,
        "top_p": null,
        "frequencyPenalty": null,
        "presencePenalty": null,
        "maxLength": 4000,
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null. if error should be handled but text is not defined, then use * for key\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "select * from todos, where not completed, newest first, write to %todos%",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }, { \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database query, select, update, insert, delete and execute sql statement\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "RawResponse": null
      }
    },
    {
      "Text": "button, name=\"Add task\", call !AddTask",
      "Comment": null,
      "ModuleType": "PLang.Modules.HtmlModule",
      "Name": "AddTaskButton",
      "Description": "Create a button with the name 'Add task' that, when clicked, calls the function 'AddTask'",
      "PrFileName": "02. AddTaskButton.pr",
      "RelativePrPath": ".build\\ui\\Todos\\02. AddTaskButton.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2024-01-15T18:01:22.5680006+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 1,
      "LineNumber": 2,
      "LlmQuestion": {
        "temperature": null,
        "top_p": null,
        "frequencyPenalty": null,
        "presencePenalty": null,
        "maxLength": 4000,
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null. if error should be handled but text is not defined, then use * for key\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "button, name=\"Add task\", call !AddTask",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }, { \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database query, select, update, insert, delete and execute sql statement\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "RawResponse": null
      }
    },
    {
      "Text": "table for %todos%\n    header: Task, Category, Due Date\n    body:  task, category, due_date(as date)",
      "Comment": null,
      "ModuleType": "PLang.Modules.HtmlModule",
      "Name": "CreateTable",
      "Description": "Create a table named 'todos' with the headers 'Task', 'Category', and 'Due Date'. The body of the table will contain the fields 'task', 'category', and 'due_date' formatted as a date.",
      "PrFileName": "03. CreateTable.pr",
      "RelativePrPath": ".build\\ui\\Todos\\03. CreateTable.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2024-01-15T21:32:17.2578173+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 2,
      "LineNumber": 3,
      "LlmQuestion": {
        "temperature": null,
        "top_p": null,
        "frequencyPenalty": null,
        "presencePenalty": null,
        "maxLength": 4000,
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null. if error should be handled but text is not defined, then use * for key\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "table for %todos%\n    header: Task, Category, Due Date\n    body:  task, category, due_date(as date)",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html\" }, { \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile\" }, { \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database query, select, update, insert, delete and execute sql statement\" }\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "RawResponse": null
      }
    }
  ],
  "Description": null,
  "Visibility": 1,
  "GoalFileName": "Todos.goal",
  "RelativeGoalPath": "\\ui\\Todos.goal",
  "RelativeGoalFolderPath": "\\ui",
  "RelativePrPath": ".build\\ui\\Todos\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\ui\\Todos",
  "BuilderVersion": "0.1.0.0",
  "GoalApiInfo": null,
  "Injections": [],
  "Signature": null,
  "Hash": "9bae13caaf9ac41e5302726937f9fb9c355207e49911901546c90db8a68f0159"
}