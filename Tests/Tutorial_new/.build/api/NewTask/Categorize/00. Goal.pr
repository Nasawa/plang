{
  "GoalName": "Categorize",
  "Comment": null,
  "GoalSteps": [
    {
      "Text": "[llm]: system: categories the user input by 3 categories, 'Work', \"home\", 'hobby'\n    user: %task%\n    scheme: {category:string}",
      "Comment": null,
      "ModuleType": "PLang.Modules.LlmModule",
      "Name": "CategorizeUserInput",
      "Description": "Categorize the user's input task into one of the three categories: 'Work', 'Home', or 'Hobby'.",
      "PrFileName": "01. CategorizeUserInput.pr",
      "RelativePrPath": ".build\\api\\NewTask\\Categorize\\01. CategorizeUserInput.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2024-01-15T22:58:11.0548693+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LineNumber": 7,
      "LlmQuestion": {
        "temperature": null,
        "top_p": null,
        "frequencyPenalty": null,
        "presencePenalty": null,
        "maxLength": 4000,
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null. if error should be handled but text is not defined, then use * for key\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "[llm]: system: categories the user input by 3 categories, 'Work', \"home\", 'hobby'\n    user: %task%\n    scheme: {category:string}",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.LlmModule\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "RawResponse": null
      }
    },
    {
      "Text": "update table Todos, set %category% where %id%",
      "Comment": null,
      "ModuleType": "PLang.Modules.DbModule",
      "Name": "UpdateTodoTable",
      "Description": "Update the 'Todos' table in the database by setting the value of the 'category' column where the 'id' matches the provided id.",
      "PrFileName": "02. UpdateTodoTable.pr",
      "RelativePrPath": ".build\\api\\NewTask\\Categorize\\02. UpdateTodoTable.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2024-01-15T22:58:38.0922616+00:00",
      "WaitForExecution": true,
      "ErrorHandler": null,
      "RetryHandler": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 1,
      "LineNumber": 10,
      "LlmQuestion": {
        "temperature": null,
        "top_p": null,
        "frequencyPenalty": null,
        "presencePenalty": null,
        "maxLength": 4000,
        "type": "StepBuilder",
        "system": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set N/A\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nWaitForExecution: Indicates if code should wait for execution to finish, default is true\r\nErrorHandler: How to handle errors, default is null. if error should be handled but text is not defined, then use * for key\r\nRetryHandler: If should retry the step if there is error, null\r\nCachingHandler: How should caching be handled, default is null\r\nRead the description of each module, then determine which module to use\r\n\r\nYour response MUST be JSON, scheme\r\n{\"StepName\": string,\n\"StepDescription\": string,\n\"Modules\": string[],\n\"WaitForExecution\": boolean,\n\"CachingHandler\"?: {\"TimeInMilliseconds\": int64,\n\"CacheKey\": string,\n\"CachingType\": int32},\n\"ErrorHandler\"?: {\"IgnoreErrors\": boolean,\n\"OnExceptionContainingTextCallGoal\"? : { String : String, ... }},\n\"RetryHandler\"?: {\"RetryCount\": int32,\n\"RetryDelayInMilliseconds\": int32}}\r\nBe Concise\r\n",
        "question": "update table Todos, set %category% where %id%",
        "assistant": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows developer to throw error. Allows developer to return out of goal or stop(end) running goal. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages using Nostr protocol. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.HtmlModule\", \"description\": \"Takes any user command and tries to convert it to html. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. \" }, \n{ \"module\": \"PLang.Modules.CultureInfoModule\", \"description\": \"Various settings for the program, such as culture, date & number formatting. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, e.g. !RenameFile. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money, sign message, verify signature. \" }, \n]\r\n## modules available ends ##\r\n## CachingType int ##\r\nSliding = 0, Absolute = 1\r\n## CachingType int ##\r\n",
        "model": "gpt-4",
        "caching": true,
        "RawResponse": null
      }
    }
  ],
  "Description": null,
  "Visibility": 0,
  "GoalFileName": "NewTask.goal",
  "RelativeGoalPath": "\\api\\NewTask.goal",
  "RelativeGoalFolderPath": "\\api",
  "RelativePrPath": ".build\\api\\NewTask\\Categorize\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\api\\NewTask\\Categorize",
  "BuilderVersion": "0.1.0.0",
  "GoalApiInfo": {
    "Method": "PUT",
    "Description": "This API categorizes the user input into three categories: 'Work', 'Home', 'Hobby'. It updates the 'Todos' table by setting the category based on the user's input.",
    "ContentEncoding": "utf-8",
    "ContentType": "application/json",
    "MaxContentLengthInBytes": 4194304,
    "CacheControlPrivateOrPublic": null,
    "CacheControlMaxAge": null,
    "NoCacheOrNoStore": null
  },
  "Injections": [],
  "Signature": null,
  "Hash": "f9347e096ead7fc61398697e331a8f91455351222a8161d3655c0eb502d92455"
}