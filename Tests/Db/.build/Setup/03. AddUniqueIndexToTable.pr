{
  "Action": {
    "FunctionName": "Execute",
    "Parameters": [
      {
        "Type": "string",
        "Name": "sql",
        "Value": "CREATE UNIQUE INDEX idx_task_description_due_date ON tasks (description, due_date)"
      }
    ],
    "ReturnValue": null
  },
  "Text": "add unqiue index to table task, on description and due_date",
  "Reload": false,
  "LlmQuestion": {
    "temperature": null,
    "top_p": null,
    "frequencyPenalty": null,
    "presencePenalty": null,
    "maxLength": 4000,
    "type": "PLang.Modules.DbModule.Builder",
    "system": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. Variables MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue: Only if the function returns a value AND if user defines %variable% to write into. If no %variable% is defined then set as null.\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}]}",
    "question": "add unqiue index to table task, on description and due_date",
    "assistant": "## functions available defined in csharp ##\r\nvoid CreateDataSource(String name) \nvoid SetDataSouceName(String name) \nvoid BeginTransaction() \nvoid EndTransaction() \nInt32 Execute(String sql) \nvoid CreateTable(String sql) \nObject Select(String sql, List`1<Object>? Parameters, Boolean? selectOneRow_Top1OrLimit1 = False) \nInt32 Update(String sql, List`1<Object>? Parameters) \nInt32 Delete(String sql, List`1<Object>? Parameters) \nInt32 Insert(String sql, List`1<Object>? Parameters)  // Basic insert statement. Will return affected row count. \nObject InsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? Parameters)  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \nString GetAdditionalSystemErrorInfo() \nString GetAdditionalAssistantErrorInfo() \n\r\n## functions available ends ##\r\n\nCreate SQL statement that works with System.Data.SQLite.SQLiteConnection.\r\nYou MUST provide Parameters if SQL has @parameter.\r\nChoose the best method to use, if the method is not provided that fits the SQL, you can use Execute to run SQL statement.\r\n### tasks table info starts ###\n[{\"cid\":0,\"name\":\"id\",\"type\":\"INTEGER\",\"notnull\":0,\"dflt_value\":null,\"pk\":1},{\"cid\":1,\"name\":\"description\",\"type\":\"TEXT\",\"notnull\":1,\"dflt_value\":null,\"pk\":0},{\"cid\":2,\"name\":\"due_date\",\"type\":\"DATETIME\",\"notnull\":1,\"dflt_value\":null,\"pk\":0},{\"cid\":3,\"name\":\"created\",\"type\":\"DATETIME\",\"notnull\":0,\"dflt_value\":\"CURRENT_TIMESTAMP\",\"pk\":0},{\"cid\":4,\"name\":\"completed\",\"type\":\"BIT\",\"notnull\":0,\"dflt_value\":null,\"pk\":0}]\n### table info ends ###",
    "model": "gpt-4",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}